<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: $ -->

<project name="scala-installer" default="build">

  <description>
    I am SABBUS for ${ant.project.name}, the build system for the Scala installer.
    Please check the 'docs/README' file for more information about me.
  </description>

  <echo>Running SABBUS for ${ant.project.name}</echo>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>

  <!-- Base properties -->
  <property name="build.dir"         value="${basedir}/build"/>
  <property name="dep.dir"           value="${basedir}/dependencies"/>
  <property name="dist.dir"          value="${basedir}/dists"/>
  <property name="izpack.build.dir"  value="${build.dir}/izpack"/>
  <property name="unix.build.dir"    value="${build.dir}/unix"/>
  <property name="win.build.dir"     value="${build.dir}/windows"/>
  <property name="lib.dir"           value="${basedir}/lib"/>
  <property name="src.dir"           value="${basedir}/src"/>
  <!-- User properties -->
  <property file="${basedir}/build.properties"/>
  <!-- Location of pre-compiled libraries properties -->
  <property name="izpack.jar"        value="${lib.dir}/standalone-compiler.jar"/>
  <property name="msil.jar"          value="${lib.dir}/msil.jar"/>
  <property name="scala.dll"         value="${lib.dir}/scala.dll"/>
  <!-- Dependencies to module 'scala' -->
  <property name="core.dir"          value="${dep.dir}/scala"/>
  <property name="core.dist.dir"     value="${core.dir}/dists"/>
  <property name="core.doc.dir"      value="${core.dir}/docs"/>
  <property name="core.lib.dir"      value="${core.dir}/lib"/>
  <property name="core.src.dir"      value="${core.dir}/src"/>
  <property name="core.latest.dir"   value="${core.dist.dir}/latest"/>
  <property name="ant-contrib.jar"   value="${core.lib.dir}/ant-contrib.jar"/>
  <property name="build.number"      value="${core.dir}/build.number"/>
  <!-- Dependencies to module 'scala-documentation' -->
  <property name="docu.dir"          value="${dep.dir}/scala-documentation"/>
  <property name="docu.dist.dir"     value="${docu.dir}/dists"/>
  <!-- Dependencies to module 'sbaz' -->
  <property name="sbaz.dir"          value="${dep.dir}/sbaz"/>
  <!-- Dependencies to module 'scalap' -->
  <property name="scalap.dir"        value="${dep.dir}/scalap"/>
  <property name="scalap.jar.name"   value="scala-decoder.jar"/>
  <property name="scalap.dist.dir"   value="${scalap.dir}/dists"/>
  <property name="scalap.latest.dir" value="${scalap.dist.dir}/latest"/>
  <!-- Dependencies to module 'scala-tool-support' -->
  <property name="support.dir"       value="${dep.dir}/scala-tool-support"/>
  <property name="support.src.dir"   value="${support.dir}/src"/>
  <!-- Distribution properties -->
  <property file="${build.number}"/>
  <property name="distrib.name"           value="scala"/>
  <property name="distrib.version"        value="${version.major}.${version.minor}.${version.patch}"/>
  <property name="distrib.archive"        value="${distrib.name}-${distrib.version}"/>
  <property name="distrib.installer"      value="${distrib.archive}-installer"/>
  <!-- Structure of the Windows build -->
  <property name="win.build.cur.dir"      value="${win.build.dir}/${distrib.archive}"/>
  <property name="win.build.bin.dir"      value="${win.build.cur.dir}/bin"/>
  <property name="win.build.doc.dir"      value="${win.build.cur.dir}/doc"/>
  <property name="win.build.latest.dir"   value="${win.build.dir}/latest"/>
  <property name="win.build.examples.dir" value="${win.build.cur.dir}/examples"/>
  <property name="win.build.scala.dir"    value="${win.build.cur.dir}"/>
  <property name="win.build.lib.dir"      value="${win.build.scala.dir}/lib"/>
  <property name="win.build.support.dir"  value="${win.build.scala.dir}/support"/>
  <!-- Structure of the Unix build-->
  <property name="unix.build.cur.dir"     value="${unix.build.dir}/${distrib.archive}"/>
  <property name="unix.build.share.dir"   value="${unix.build.cur.dir}/share"/>
  <property name="unix.build.doc.dir"     value="${unix.build.share.dir}/doc/${distrib.name}"/>
  <property name="unix.build.latest.dir"  value="${unix.build.dir}/latest"/>
  <property name="unix.build.man.dir"     value="${unix.build.share.dir}/man"/>
  <property name="unix.build.scala.dir"   value="${unix.build.share.dir}/${distrib.name}"/>
  <property name="unix.build.bin.dir"     value="${unix.build.scala.dir}/bin"/>
  <property name="unix.build.lib.dir"     value="${unix.build.scala.dir}/lib"/>
  <property name="unix.build.support.dir" value="${unix.build.scala.dir}/support"/>
  <property name="unix.build.test.dir"    value="${unix.build.scala.dir}/test"/>

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="init" unless="init.avail">
    <!-- Testing if everything is in place -->
    <echo level="verbose">core.dir=${core.dir}</echo>
    <fail message="Required Scala core is missing; check the 'core.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${core.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose" message="ant-contrib.jar=${ant-contrib.jar}"/>
    <fail message="Additional Ant tasks in '${core.lib.dir}/' is not available">
      <condition><not>
        <available
          classname="net.sf.antcontrib.AntContribVersion"
          classpath="${ant-contrib.jar}"
        />
      </not></condition>
    </fail>
    <fail message="Required Scala distribution is missing; run command 'ant dist' in the directory specified by the 'core.dir' property.">
      <condition><not><and>
        <available file="${core.dist.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose">docu.dir=${docu.dir}</echo>
    <fail message="Required Scala documentation is missing; check the 'docu.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${docu.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala documents are missing; run command 'ant dist' in the directory specified by the 'docu.dir' property.">
      <condition><not><and>
        <available file="${docu.dist.dir}/Changes.pdf"/>
        <available file="${docu.dist.dir}/ScalaByExample.pdf"/>
        <available file="${docu.dist.dir}/ScalaRationale.pdf"/>
        <available file="${docu.dist.dir}/ScalaReference.pdf"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala tool 'scalap' is missing; run command 'ant dist' in the directory specified by the 'scalap.dir' property.">
      <condition><not><and>
            <available file="${scalap.dist.dir}"/>
          </and></not></condition>
    </fail>
    <echo level="verbose">support.dir=${support.dir}</echo>
    <fail message="Required Scala support is missing; check the 'support.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${support.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose">version.major=${version.major}</echo>
    <fail message="Properties 'version.*' in ${build.number} are not available">
      <condition><not><and>
        <isset property="version.major"/>
        <isset property="version.minor"/>
        <isset property="version.patch"/>
      </and></not></condition>
    </fail>
    <!-- Creating boot-level tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${ant-contrib.jar}"/>
      </classpath>
    </taskdef>
    <!-- Finding out what system architecture is being used -->
    <condition property="os.win">
      <os family="windows"/>
    </condition>
    <if><isset property="os.win"/>
      <then>
        <exec
          executable="cygpath"
          vmlauncher="no"
          errorproperty="cygpath.err"
          outputproperty="cygpath.out"
        >
          <arg value="--windir"/>
        </exec>
        <condition property="os.cygwin">
          <equals arg1="${cygpath.err}" arg2=""/>
        </condition>
      </then>
    </if>
    <condition property="os.unix">
      <or>
        <os family="unix"/>
        <os family="mac"/>
        <isset property="os.cygwin"/>
      </or>
    </condition>
    <property name="init.avail" value="true"/>
  </target>

<!-- ===========================================================================
FULL DISTRIBUTION
============================================================================ -->

  <target name="distrib.all" depends="init,distrib.unix,distrib.win"
          description="Creates a full Scala distribution."/>

  <target name="distrib.unix"
          description="Creates a full Scala distribution for Unix.">
    <!-- Set up 'share/scala/bin' directory (unix) -->
    <copy todir="${unix.build.bin.dir}">
      <fileset dir="${core.latest.dir}/bin" excludes="**/*.bat"/>
      <fileset dir="${scalap.latest.dir}/bin" excludes="**/*.bat"/>
    </copy>
    <fixcrlf srcdir="${unix.build.bin.dir}" eol="unix"/>
    <chmod dir="${unix.build.bin.dir}" perm="a+x" includes="**/*"/>
    <!-- Set up 'share/doc' directory (unix) -->
    <copy todir="${unix.build.doc.dir}">
      <fileset dir="${core.doc.dir}" includes="LICENSE,README,VERSION"/>
      <fileset dir="${core.latest.dir}/doc/scala" includes="api/**,examples/**"/>
      <fileset dir="${docu.dist.dir}" includes="**/*.pdf"/>
    </copy>
    <fixcrlf srcdir="${unix.build.doc.dir}" eol="unix"
            includes="LICENSE,README,**/*.css,**/*.html,**/*.scala"/>
    <!-- Set up 'share/man' directory (unix) -->
    <copy todir="${unix.build.man.dir}">
      <fileset dir="${core.doc.dir}/man" includes="**/*.1"/>
    </copy>
    <!-- Set up 'share/scala/lib' directory (unix) -->
    <copy todir="${unix.build.lib.dir}">
      <fileset dir="${core.latest.dir}/lib" includes="**/*.jar"/>
      <fileset file="${msil.jar}"/>
      <fileset file="${scala.dll}"/>
      <fileset dir="${scalap.latest.dir}/lib" includes="${scalap.jar.name}"/>
    </copy>
    <!-- Set up 'share/scala/support' directory (unix) -->
    <copy todir="${unix.build.support.dir}">
      <fileset dir="${support.src.dir}"
               includes="emacs/**,gedit/**,jedit/**,kate/**,scite/**,vim/**,xcode/**"/>
    </copy>
    <fixcrlf srcdir="${unix.build.support.dir}" eol="unix"/>
    <!-- Set up 'share/scala/sources.tar.gz' (unix) -->
    <copy todir="${unix.build.scala.dir}/src">
      <fileset dir="${core.src.dir}/library" includes="scala/**/*.scala"/>
    </copy>
    <fixcrlf srcdir="${unix.build.scala.dir}/src" eol="unix"/>
    <tar destfile="${unix.build.scala.dir}/src.tar.gz"
         basedir="${unix.build.scala.dir}/src" includes="scala/**/*.scala"
         compression="gzip"/>
    <delete dir="${unix.build.scala.dir}/src"/>
    <!-- Set up 'bin' directory (unix) -->
    <mkdir dir="${unix.build.cur.dir}/bin"/>
    <mysymlink file="${src.dir}/bin/symlink.tmpl"
               tofile="${unix.build.cur.dir}/bin/.symlink"/>
    <!-- Create gz and bz2 compressed tarballs -->
    <mytar dir="${unix.build.dir}" archive="${distrib.archive}"
           compression="gzip"/>
    <mytar dir="${unix.build.dir}" archive="${distrib.archive}"
           compression="bzip2"/>
    <!-- Create md5 checksums -->
    <checksum file="${unix.build.dir}/${distrib.archive}.tar.gz"
              forceOverwrite="yes" fileext=".md5"/>
    <checksum file="${unix.build.dir}/${distrib.archive}.tar.bz2"
              forceOverwrite="yes" fileext=".md5"/>
    <!-- Set up 'latest' directory (unix) -->
    <if><isset property="os.win"/>
      <then>
        <copy todir="${unix.build.latest.dir}">
          <fileset dir="${unix.build.cur.dir}"/>
        </copy>
      </then>
      <else>
        <symlink link="${unix.build.latest.dir}"
                 resource="${unix.build.cur.dir}"
                 overwrite="yes"
                 failonerror="no"/>
      </else>
    </if>
  </target>

  <target name="distrib.mac" depends="distrib.unix"/>

  <target name="distrib.win"
          description="Creates a full Scala distribution for Windows.">
    <!-- Set up 'bin' directory (win) -->
    <copy todir="${win.build.cur.dir}">
      <fileset dir="${core.doc.dir}" includes="LICENSE,README"/>
      <fileset dir="${core.latest.dir}" includes="bin/*.bat"/>
      <fileset dir="${scalap.latest.dir}" includes="bin/*.bat"/>
    </copy>
    <fixcrlf srcdir="${win.build.cur.dir}" eol="dos"
             includes="LICENSE,README,bin/*.bat"/>
    <!-- Set up 'doc' directory (win) -->
    <copy todir="${win.build.doc.dir}">
      <fileset dir="${core.latest.dir}/doc/scala" includes="api/**,examples/**"/>
      <fileset dir="${docu.dist.dir}" includes="**/*.pdf"/>
    </copy>
    <fixcrlf srcdir="${win.build.doc.dir}" eol="dos"
             includes="**/*.css,**/*.html,**/*.js"/>
    <!-- Set up 'lib' directory (win) -->
    <copy todir="${win.build.lib.dir}">
      <fileset dir="${core.latest.dir}/lib" includes="**/*.jar"/>
      <fileset file="${msil.jar}"/>
      <fileset file="${scala.dll}"/>
      <fileset dir="${scalap.latest.dir}/lib" includes="${scalap.jar.name}"/>
    </copy>
    <!-- Set up 'support' directory (win) -->
    <copy todir="${win.build.support.dir}">
      <fileset dir="${support.src.dir}"
               includes="context/**,emacs/**,jedit/**,scite/**,textpad/**,ultraedit/**,vim/**"/>
    </copy>
    <fixcrlf srcdir="${win.build.support.dir}" eol="dos"/>
    <!-- Set up 'src.zip' (win) -->
    <copy todir="${win.build.scala.dir}/src">
      <fileset dir="${core.src.dir}/library" includes="scala/**/*.scala"/>
    </copy>
    <fixcrlf srcdir="${win.build.scala.dir}/src" eol="dos"/>
    <zip destfile="${win.build.scala.dir}/src.zip"
         basedir="${win.build.scala.dir}" includes="src/**"/>
    <delete dir="${win.build.scala.dir}/src"/>
    <!-- Create zip archive -->
    <zip destfile="${win.build.dir}/${distrib.archive}.zip"
         basedir="${win.build.dir}" includes="${distrib.archive}/**"/>
    <checksum file="${win.build.dir}/${distrib.archive}.zip"
              forceOverwrite="yes" fileext=".md5"/>
    <!-- Set up 'latest' directory (win) -->
    <if><isset property="os.win"/>
      <then>
        <copy todir="${win.build.latest.dir}">
          <fileset dir="${win.build.cur.dir}"/>
        </copy>
      </then>
      <else>
        <symlink link="${win.build.latest.dir}"
                 resource="${win.build.cur.dir}"
                 overwrite="yes"
                 failonerror="no"/>
      </else>
    </if>
  </target>

<!-- ===========================================================================
IZPACK INSTALLER
============================================================================ -->

  <target name="izpack.init">
    <!-- A path containing the IzPack library -->
    <path id="izpack.classpath">
      <pathelement location="${izpack.jar}"/>
    </path>
    <fail message="IzPack compiler in 'lib/' is not available">
      <condition><not>
        <available classname="com.izforge.izpack.ant.IzPackTask"
                   classpathref="izpack.classpath"/>
      </not></condition>
    </fail>
    <taskdef name="izpack"
             classname="com.izforge.izpack.ant.IzPackTask"
             classpathref="izpack.classpath"/>
  </target>

  <target name="build" depends="distrib.all, izpack.all"
          description="Creates an IzPack installer for all scala distributions"/>

  <target name="izpack.all" depends="izpack.init">
    <mkdir dir="${izpack.build.dir}"/>
    <copy todir="${izpack.build.dir}" overwrite="true">
      <fileset dir="${src.dir}"
               excludes="**/*.html, **/*.xml"/>
    </copy>
    <copy todir="${izpack.build.dir}" overwrite="true">
      <!-- CAUTION! Copy operations using filters will -->
      <!-- corrupt binary files (see "Core Types").    -->
      <fileset dir="${src.dir}"
               includes="**/*.html, **/*.xml"/>
      <filterset>
        <filter token="UNIXDIR"     value="${unix.build.latest.dir}"/>
        <filter token="WINDIR"      value="${win.build.latest.dir}"/>
        <filter token="RESOURCEDIR" value="${izpack.build.dir}"/>
        <filter token="PREFIX"      value="${distrib.name}"/>
        <filter token="VERSION"     value="${distrib.version}"/>
        <filter token="URL"         value="http://scala.epfl.ch/"/>
      </filterset>
    </copy>
    <izpack input="${izpack.build.dir}/install-nsc.xml"
            output="${unix.build.dir}/${distrib.installer}.jar"
            installerType="standard" basedir="${basedir}"
            izPackDir="${izpack.build.dir}"/>
  </target>

<!-- ===========================================================================
DISTRIBUTION
============================================================================ -->

  <target name="dist" depends="clean.all,build">
    <mkdir dir="${dist.dir}"/>
    <copy todir="${dist.dir}" overwrite="true">
      <fileset dir="${unix.build.dir}" includes="*.jar,*.md5,*.tar.bz2, *.tar.gz"/>
      <fileset dir="${win.build.dir}" includes="*.zip, *.md5"/>
    </copy>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <target name="clean"
          depends="clean.build"
          description="Deletes all generated build files."/>

  <target name="clean.all"
          depends="clean.build, clean.distrib"
          description="Deletes all generated files, both build and distribution files."/>

  <target name="clean.build">
    <delete dir="${build.dir}" includeemptydirs="true"
            quiet="true" failonerror="false"/>
  </target>

  <target name="clean.distrib"
          description="Deletes all generated distribution files.">
    <delete dir="${dist.dir}" includeemptydirs="true"
            quiet="true" failonerror="false"/>
  </target>

<!-- ===========================================================================
HELP
============================================================================ -->

  <target name="help" depends="usage"/>

  <target name="usage" description="Display usage information.">
    <echo>Execute 'ant -projecthelp' for build file help.</echo>
    <echo>Execute 'ant -help' for Ant help.</echo>
  </target>

<!-- ===========================================================================
MACROS
============================================================================ -->

  <!-- create symbolic links *relative* to their target -->
  <!-- Ant task 'symlink' only support canonical paths  -->
  <macrodef name="mysymlink">
    <attribute name="file"/>
    <attribute name="tofile"/>
    <sequential>
      <copy file="@{file}" tofile="@{tofile}"/>
      <chmod file="@{tofile}" perm="755"/>
      <exec executable="sh">
        <arg line="@{tofile} ../share/${distrib.name}/bin/scala"/>
      </exec>
      <exec executable="sh">
        <arg line="@{tofile} ../share/${distrib.name}/bin/scalac"/>
      </exec>
      <exec executable="sh">
      <arg line="@{tofile} ../share/${distrib.name}/bin/scaladoc"/>
      </exec>
      <exec executable="sh">
        <arg line="@{tofile} ../share/${distrib.name}/bin/scalaint"/>
      </exec>
      <exec executable="sh">
        <arg line="@{tofile} ../share/${distrib.name}/bin/scalap"/>
      </exec>
      <delete file="@{tofile}"/>
    </sequential>
  </macrodef>

  <!-- create Unix tarballs while preserving permissions and symlinks -->
  <!-- Ant task 'tar' can't do that.. -->
  <macrodef name="mytar">
    <attribute name="dir"/>
    <attribute name="archive"/>
    <attribute name="compression"/>
    <sequential>
      <exec dir="@{dir}" executable="tar">
        <arg line="cf @{archive}.tar -C @{archive} ."/>
      </exec>
      <exec dir="@{dir}" executable="@{compression}">
        <arg line="-9 @{archive}.tar"/>
      </exec>
    </sequential>
  </macrodef>

</project>
