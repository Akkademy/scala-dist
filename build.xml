<?xml version="1.0" encoding="UTF-8"?>

<project name="sbaz" default="build">
  <!-- set the following to your local sbaz-managed directory -->
  <property name="scala.home"     value="${user.home}/sbaz"/>
  <property name="scala.lib.dir"  value="${scala.home}/lib"/>
  <property name="scala.comp.jar" value="${scala.lib.dir}/scala-compiler.jar"/>
  <property name="scala.lib.jar"  value="${scala.lib.dir}/scala-library.jar"/>
  <property name="fjbg.jar"       value="${scala.lib.dir}/fjbg.jar"/>
  <property name="junit.jar"      value="${scala.lib.dir}/junit.jar"/>
  <property name="servlet.jar"    value="${scala.lib.dir}/servlet-api.jar"/>

  <property name="number.file"    value="${basedir}/build.number"/>
  <property name="build.dir"      value="${basedir}/build"/>
  <property name="build.pdf.dir"  value="${build.dir}/manual/pdf"/>
  <property name="build.html.dir" value="${build.dir}/manual/html"/>
  <property name="dist.dir"       value="${basedir}/dists"/>

  <target name="init">
    <!-- Testing if everything is in place -->
    <echo level="verbose" message="scala.comp.jar=${scala.comp.jar}"/>
    <fail message="Scala compiler in '${scala.lib.dir}/' is not available">
      <condition><not>
        <available
          classname="scala.tools.ant.Scalac"
          classpath="${scala.comp.jar}:${scala.lib.jar}"
        />
      </not></condition>
    </fail>
    <echo level="verbose" message="number.file=${number.file}"/>
    <fail message="Number file in '${basedir}/' is not available">
      <condition><not>
        <available file="${number.file}"/>
      </not></condition>
    </fail>
    <property file="${number.file}"/>
    <property name="version.number" value="${version.major}.${version.minor}"/>
    <taskdef resource="scala/tools/ant/antlib.xml">
      <classpath>
        <pathelement location="${scala.comp.jar}"/>
        <pathelement location="${scala.lib.jar}"/>
        <pathelement location="${fjbg.jar}"/>
      </classpath>
    </taskdef>
  </target>

  <target name="build.main" depends="init">
    <mkdir dir="build/build.main"/>
    <scalac srcdir="src"
            destdir="build/build.main">
      <classpath>
        <!-- I have to add scala-library manually??  XXX -->
        <pathelement location="${scala.lib.jar}"/>
        <pathelement location="${servlet.jar}"/>
      </classpath>
      <include name="**/*.scala"/>
    </scalac>

    <jar destfile="${build.dir}/sbaz.jar"
         basedir="build/build.main">
      <manifest>
        <attribute name="Main-Class" value="sbaz.clui.CommandLine"/>
      </manifest>
    </jar>
  </target>

  <target name="build.tests" depends="build.main">
    <mkdir dir="build/build.tests"/>
    <scalac srcdir="tests"
            destdir="build/build.tests">
      <classpath>
         <pathelement location="${scala.lib.jar}"/>
        <!-- how can the following be done in the bazaar?  I'd like sbazlib=junit.jar -->
        <pathelement location="${junit.jar}"/>
        <pathelement location="${servlet.jar}"/>
        <pathelement location="build/sbaz.jar"/>
      </classpath>
      <include name="**/*.scala"/>
    </scalac>

    <jar
      destfile="${build.dir}/tests.jar"
      basedir="${build.dir}/build.tests"
    />
  </target>

  <target name="toolScripts">
    <mkdir dir="build/toolScripts"/>
    <scalascript
      file="build/toolScripts/sbaz"
      name="Scala Bazaars command-line client"
      class="sbaz.clui.CommandLine"
      version="${version.number}"
      classpath="#SCALA_HOME#/lib/sbaz.jar:#SCALA_HOME#/misc/sbaz/scala-library.jar"
      javaFlags="-Xmx256M -Xms16M"
    />
    <!-- temporary hack to patch the batch file sbaz.bat -->
    <replace
      file="${build.dir}/toolScripts/sbaz.bat"
      token="~dp0"
      value="~dps0"
    />
  </target>

  <target name="manual.pdf"
          depends="manual.pdf.check"
          unless="manual.pdf.uptodate">
    <mkdir dir="${build.pdf.dir}"/>
    <exec executable="docbook2pdf">
      <arg line="-u --output ${build.pdf.dir} doc/manual/manual.xml"/>
    </exec>
  </target>

  <target name="manual.pdf.check">
    <uptodate
      srcfile="doc/manual/manual.xml"
      targetfile="${build.pdf.dir}/manual.pdf"
      property="manual.pdf.uptodate"
    />
  </target>

  <target name="manual.html"
          depends="manual.html.check"
          unless="manual.html.uptodate">
    <mkdir dir="${build.html.dir}"/>
    <exec executable="docbook2html">
      <arg line="-u --output ${build.html.dir} doc/manual/manual.xml"/>
    </exec>
  </target>

  <target name="manual.html.check">
    <uptodate
      srcfile="doc/manual/manual.xml"
      targetfile="${build.html.dir}/manual.html"
      property="manual.html.uptodate"
    />
  </target>

  <target name="manual" depends="manual.html, manual.pdf"/>

  <target name="dist" depends="build.main, toolScripts, manual">
    <mkdir dir="${dist.dir}"/>
    <sbaz file="${dist.dir}/sbaz-${version.number}.sbp"
          adfile="${dist.dir}/sbaz-${version.number}.advert"
          name="sbaz"
          version="${version.number}"
          desc="The command-line interface to Scala Bazaars.  Scala Bazaars
let you share Scala packages and other goodies with other
Scala users."
          link="http://scala.epfl.ch/downloads/packages/sbaz-${version.number}.sbp">

      <libset dir="${build.dir}" includes="sbaz.jar"/>
      <binset dir="${build.dir}/toolScripts"/>
      <docset dir="${build.html.dir}"/>
      <docset dir="${build.pdf.dir}" includes="*.pdf"/>

      <!-- include the version of scala2-library used during compilation -->
      <miscset dir="${scala.lib.dir}" includes="scala-library.jar"/>
    </sbaz>
  </target>

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete
        dir="@{dir}"
        includeemptydirs="yes"
        quiet="yes"
        failonerror="no"
      />
    </sequential>
  </macrodef>

  <target
    name="clean"
    description="Cleans build files"
    depends="clean.build"
  />

  <target name="clean.build">
    <remove dir="${build.dir}"/>
  </target>

  <target name="clean.all">
    <remove dir="${build.dir}"/>
    <remove dir="${dist.dir}"/>
  </target>

  <target
    name="build"
    description="Build"
    depends="build.main, build.tests"
  />

</project>
