<?xml version = '1.0' encoding = 'UTF-8'?>
<!DOCTYPE article PUBLIC "-//Norman Walsh//DTD DocBook XML V3.1.7//EN"
                         "http://nwalsh.com/docbook/xml/3.1.7/db3xml.dtd">
<article>
  <artheader>
    <title>Scala Bazaars Reference Manual</title>
    <author>
      <firstname>Alexander</firstname>
      <surname>Spoon</surname>
    </author>
    <pubdate>February 2006</pubdate>
  </artheader>
  <sect1><title>Overview</title>

    <para>Scala Bazaars supports Scala enthusiasts in sharing the
    software they create with each other.  The community is
    strengthened when people can help each other out by sharing code.
    A programming language needs an archive of library code to be its
    most useful.</para>

    <para>Scala Bazaars has several features specialized for this kind
    of community:</para>

    <itemizedlist>

    <listitem><para>Since programming efforts in the community are
    distributed around the world, the system must allow loose,
    decoupled collaboration.  Participants are not required to wait
    for each other nor for any centralized
    authority.</para></listitem>

    <listitem><para>Since subgroups of the community have their own
    needs&mdash;just consider groups doing commercial
    development!&mdash;the system should support subgroup-specific
    access control policies.</para></listitem>

    <listitem><para>Since many open source projects are updated
    frequently, the system must allow conveniently updating components
    as new versions become available.</para></listitem>

    <listitem><para>Since, even in the common open-source group, there
    are different tolerances for stable versus new offerings, the
    system supports having multiple public servers with different
    update policies</para></listitem>

    </itemizedlist>


    <para>Scala Bazaars is most closely related to Debian's APT,
    though it shares spirit with systems including: YUM, FreeBSD
    ports, CPAN, CTAN, SqueakMap, and Fink.  The main difference from
    APT is that Bazaars tries to make it not only possible, but
    convenient, for subgroups to run their own servers with their own
    access policies.</para>


    <para>The present document is a reference manual for Scala
    Bazaars.  It is complete at the expense of readable.  It does
    include full specifications for all components of the system,
    including the command-line interface, all file formats, and the
    network protocol.  Those wanting to use the system should first
    check whether a tutorial exists for the specific need.  Those
    wanting a more philosophical look at the system, including
    comparisons to other systems and to the literature, should look at
    the Package Universes Architecture document.</para>

  </sect1>

  <sect1><title>Architectural Concepts</title>

    <para>This section describes the architecture as a whole.  Each
    component of the architecture is described in detail in a later
    section.</para>

    <para>Users of the system have a <emphasis>local managed
    directory</emphasis> that includes content supplied by the system.
    In general, users should not modify content in a managed directory
    except via a Scala Bazaars system tool.  The one exception is the
    <filename>config</filename> directory, which is explicitly
    intended for user modification and should not be modified by the
    Scala Bazaars tool.</para>

    <para>Sharable content is held by <emphasis>packages</emphasis>.
    A package can be installed into a local managed directory, in
    which case all of its included files are extracted into the
    managed directory.  A package can also be removed from a local
    managed directory, causing all of the files it installed to be
    removed.</para>


    <para>Each package has a name and a version.  Packages with the
    same name may be substituted for each other, but packages with
    larger version numbers are preferable in some sense.</para>

    <para>A <emphasis>bazaar</emphasis> is an evolving set of
    packages.  Each managed directory is associated with one bazaar.
    The system makes it convenient to choose and install packages from
    a managed directory's own bazaar, but not from other bazaars.  The
    set of available packages evolves as the community associated with
    the bazaar shares and retracts packages over time.</para>

    <para>Packages may depend on other packages.  All dependencies are
    resolved within a single bazaar.  The system does not allow
    installing or removing packages in a way that a managed
    directory's dependencies become unsatisfied.</para>


    <para>On the whole, this approach gives convenient upgrades
    (simply grab the newest version of everything), loose coupling
    (you can wait for a while to upgrade), and convenient dependency
    management (requesting the install of a package automatically
    installs the packages it depends on).  The cost of this approach
    is that packages must be posted separately to each bazaar they are
    useful in, but as argued in the architecture document, that cost
    appears to be ephemeral.</para>


    <para>Bazaars may be combined in a variety of ways.  Each bazaar
    has its own access policy, and thus combinations of bazaars with
    different access policies can yield a wide variety of useful
    configurations.</para>


    <para>Bazaars do not hold the packages themselves.  Instead, a
    bazaar holds package advertisements, and the packages themselves
    must be posted separately.  Each package advertisement includes a
    URL referencing the associated package.</para>

  </sect1>

  <sect1><title>Bazaar Definitions</title>

    <para>There are a number of kinds of bazaars.  They are each
    described here along with the XML used to formally describe each
    kind.</para>

 
    <para>Every bazaar has a name and a description.  The name is used
    by the command-line interface to Scala Bazaars whenever it is
    necessary to specify a specific simple bazaar within a compound
    bazaar, and is otherwise ignored.  The description is purely for
    the benefit of the user, and is completely ignored by the
    tools.</para>


    <sect2><title>Simple Bazaar</title>

    <para>A simple bazaar includes the packages advertised on a single
    bazaar server.  An example XML description of a simple bazaar is:</para>

<blockquote><programlisting><![CDATA[<simpleuniverse>
  <name>scala-dev</name>
  <description>
    
    development universe of Scala
  
  </description>
  <location>http://scbaztmp.lexspoon.org:8006/scala-dev</location>
</simpleuniverse>]]></programlisting></blockquote>

    <para>The location tag specifies which Bazaars server supplies
    packages for this universe.</para>

    </sect2>

    <sect2><title>Empty Bazaar</title>

    <para>The empty bazaar holds no packages at all.  Its XML description
    is simply:</para>

    <blockquote><programlisting>&lt;emptyuniverse/></programlisting></blockquote>
    <para>The name and description of the empty universe are fixed.
    The name is always <quote>empty,</quote> while the
    description is always something like, <quote>The empty
    universe, which contains no packages.</quote></para>

    </sect2>

    <sect2><title>Override Bazaar</title>

    <para>An override bazaar combines the packages from multiple other
    bazaars, with packages in later bazaars overriding packages in
    earlier ones.  The overriding is name-based: a package in a later
    bazar causes <emphasis>any</emphasis> same-named package in an
    earlier bazaar to disappear from the combined override bazaar.</para>

    <para>An example XML description is as follows:</para>

<blockquote><programlisting><![CDATA[<overrideuniverse>
<name>my-stuff</name>
<description>a combination of public and private packages</description>
<components>
  <simpleuniverse>
    <name>scala-dev</name>
    <description>development universe of Scala </description>
    <location>http://scbaztmp.lexspoon.org:8006/scala-dev</location>
  </simpleuniverse>
  <simpleuniverse>
    <name>local-hacks</name>
    <description>some local hacks of mine</description>
    <location>http://localhost/sbaz/local-hacks</location>
  </simpleuniverse>
</components>
</overrideuniverse>]]></programlisting></blockquote>


    </sect2>

    <sect2><title>Filter Bazaar (not yet implemented)</title>

    <para>A filter bazaar includes those packages from some other
    bazaar whose name matches a designated regular expression.  Filter
    bazaars are thus useful for taking just a few packages from an
    existing server.</para>

    </sect2>

    <sect2><title>Literal Bazaar (not yet implemented)</title>

    <para>A literal bazaar includes a fixed set of packages.  Literal
    bazaars are mainly useful for testing.</para> 

    </sect2>

  </sect1>


  <sect1><title>Access Control (not yet implemented)</title>
 
  <para>It is planned to implement access control, so that access to a
  bazaar server is limited.  The details are under development, but
  suffice to say that it is planned to implement sufficent control
  that people may be individually given
  rights&mdash;<quote>capabilities</quote>&mdash; to list the packages
  on a server and/or to share and retract packages on a server.</para>

  </sect1>


  <sect1><title>Common Configurations</title>


    <para>The available bazaar types and access-control policies
    described above can be combined to form a number of useful
    configurations.  This section outlines several of them.</para>


    <formalpara><title>No restrictions</title> <para>Wikis have proven
    that effective and useful communities can be built even with no
    security restrictions at all.  This policy can be implemented by
    posting all of the server's capabilities on a public web
    page. </para></formalpara>

    <formalpara><title>Full access, but only to community
    members</title> <para>Many open-source projects have an
    organization of this form, including Debian's <quote>Debian
    Developers</quote> and FreeBSD's <quote>committers.</quote> This
    policy can be implemented by giving the capability-creation and
    -revocation capabilities to the membership gatekeepers.  The last
    step of admitting a new member to the community is to give them
    their own capabilities to manipulate the community bazaar
    servers. </para></formalpara>

    <formalpara><title>Single provider, multiple users</title>
    <para>An individual developer wants to provide a suite of packages
    to be used by a larger community&mdash;possibly the world, or
    possibly a limited base of subscribers.  To implement this policy,
    the developer can keep a server's package-adding capabilities for
    personal use but publish the package-listing capability to the
    desired user base. </para></formalpara>

    <formalpara><title>Moderation queues</title> <para>Sometimes it is
    desirable to have a large community contribute suggested packages,
    but a smaller group to decide on what is actually included.  A
    moderation queue can be implemented as a separate bazar where the
    package-addition capability is made available to whichever
    community is allowed to contribute suggestions (perhaps the entire
    world).  Moderators would have both a reading capability for the
    moderation queue and a package-adding capability for the main
    bazaar, and could copy packages from the queue to the main bazaar
    whenever they are deemed appropriate. </para></formalpara>


    <formalpara><title>Private local development</title>
    <para>Individual groups can form their own bazaar for private
    development without needing to coordinate with any central
    organization.  They simply create the bazaar and share keys with
    members of the group according to their own local security
    policy. </para></formalpara>

    <formalpara><title>Public libraries plus local development</title>
    <para>The above organization can be refined by allowing developers
    to use publicly available packages even as they develop packages
    for private use.  This policy can be implemented with an override
    bazaar combining the local bazaar with one or more public
    bazaars. </para></formalpara>


    <formalpara><title>Localized versions of packages</title>
    <para>Local groups may want to use something similar to a
    widely-scoped bazaar, but override specific packages with
    localized versions.  For example, the local bazaar might have
    language-specific versions of packages.  Users want to use the
    localized version of a package whenever one is available, but the
    global version otherwise.  This policy is implemented by creating
    a bazaar server holding the localized packages, and then having
    users operate in an override bazaar combining this localized
    bazaar with the public one. </para></formalpara>

    <formalpara><title>Stable versus unstable streams</title>
    <para>Projects frequently distinguish between stable and unstable
    streams of development.  The stable streams include packages that
    are heavily tested and deemed to be reliable, while the unstable
    streams include packages that are more current and featureful but
    are not as reliable.  A project can implement this policy by
    having separate bazaar servers for each development stream.  Users
    point their managed directories to the bazaar server appropriate
    to their needs.</para> </formalpara>



    <formalpara><title>Freezing new stable distribution</title>
    <para>A common process for generating stable distributions of code
    is to take an unstable stream, start testing it, and disallow any
    patches except for bug fixes.  After some point, the distribution
    is <emphasis>frozen</emphasis> and considered a stable release.
    Such processes can be implemented by manipulating the outstanding
    capabilities as time passes.  The testing phase can be implemented
    by revoking all outstanding add-package capabilities and switching
    to a moderation queue process.  The actual freeze can be
    implemented by destroying the moderation queue and revoking the
    remaining add-package capabilities.  The frozen universe can then
    be duplicated, with one fork hosting a new development stream
    while the other becomes is designated a stable
    release. </para></formalpara>


  </sect1>


  <sect1><title>Packages and Package Advertisements</title>
    <sect2><title>Overview</title>
    <para>zip file, sbp ending canonical, meta/description, meta ignored, other files unzipped</para>
    </sect2>

    <sect2><title>Package Description Files</title>
    <para>meta/description, each field, how dependencies are done.  see
    next section for info on dependencies....</para>
    </sect2>

    <sect2><title>Package Advertisements</title>
    <para>package plus link</para>
    </sect2>

  </sect1>

  <sect1><title>Versions and Dependencies</title>
  <para>
    version numbers and their total order.

    packages with the same name are considered substitutes for each other,
    but higher version numbers are generally preferable.  (stategically,
    if this is not the case, users should consider splitting the bazaar
    or splitting the packages...)

    planned: a richer set of dependencies including provides, suggests, and
    alternatives.  possibly planned: version tags, e.g. finger >= 1.0 .
    </para>
  </sect1>

  <sect1><title>Command-Line Interface</title>
    <sect2><title>Overview</title>

    <para>The command-line interface to Scala Bazaars is the
    <command>sbaz</command> tool.</para>

    </sect2>
    <sect2><title>Start Up and Settings</title>
    <para>aoeu</para>
    </sect2>
    <sect2><title>Command Reference</title>
      <sect3><title>help</title>
    <para>aoeu</para>
      </sect3>
    </sect2>
  </sect1>
  <sect1><title>Suggested Directory Layout</title>

    <para>Each sbaz repository has its own informal standards for the
    directory layout within a managed directory.  This section
    documents the emerging layout used in the main Scala bazaar.
    It is the standard for that repository, and it might serve
    as a guideline for other repositories.</para>

    <itemizedlist>
    <listitem><para><filename>lib</filename> &mdash; Any jar file(s)
    associated with the package, especially those that are meant as
    libraries to be usable by other programs in the bazaar.  Jars
    placed in this directory are particularly easy to access, because
    both the generic <command>scala</command> script and most of the
    tool-running scripts in <filename>bin</filename> will
    automatically load classes from any jars in
    <filename>lib</filename>.  Normally, jar filenames in this
    directory do not include any version number.  A typical filename
    is <filename>sbaz.jar</filename>.</para></listitem>

    <listitem><para><filename>src</filename> &mdash; Source code for the
    package.  This source code should be presented in a way that IDE's
    can find the code easily.  Thus far, packages install directories
    under <filename>src</filename> that parallel the dotted package
    paths from the Scala code.  For example, class
    <filename>sbaz.clui.CommandLine</filename> is found in a file
    named
    <filename>src/sbaz/clui/CommandLine.scala</filename>.</para></listitem>

    <listitem><para><filename>bin</filename> &mdash; Command-line runnable
    scripts.  These are most easily created via the Scala ant tasks.
    As a special case, the <command>sbaz</command> tool will make
    files within <filename>bin</filename> be executable on platforms
    where that makes sense.</para></listitem>

    <listitem><para><filename>config</filename> &mdash; Configuration
    files.  Packages should not include any files in this directory!
    They should look in this directory for optional user
    configuration.  If there is a single configuration file, it can be
    included directly in the <filename>config</filename> directory,
    e.g. with a name like <filename>config/sbaz.properties</filename>.
    If there is more than one configuration file for a package, then
    the files should be located in a subdirectory of
    <filename>config</filename> named after the package name.  For
    example, the <command>sbaz</command> package could include its
    configuration files in a directory anmed
    <filename>config/sbaz/</filename>.</para></listitem>

    <listitem><para><filename>misc</filename> &mdash; Arbitrary files not
    included in any of the above.  All such files for a package should
    be included in a directory named after the package.  For example,
    the <command>sbaz</command> package includes miscellaneous files
    in the directory <filename>misc/sbaz/</filename>.
    </para></listitem> </itemizedlist>

    

  </sect1>

  <sect1><title>Common Problems</title>
    <sect2><title>Firewalls and HTTP Proxies</title>
      <para><![CDATA[Sbaz (XXX macro-ize?) uses HTTP to communicate with universe servers.  If your network blocks HTTP access, then, you need to configure sbaz to use an HTTP proxy.  To do this, create a file named ]]><filename><![CDATA[config/sbaz.properties]]></filename><![CDATA[ in your managed directory, and give it the appropriate proxy settings, something like:]]></para>
      <blockquote><programlisting><![CDATA[http.proxySet=true
http.proxyHost=localhost
http.proxyPort=3128
]]></programlisting></blockquote>
    </sect2>
  </sect1>

  <sect1><title>Managed Directory Layout</title>
  <para>meta directory, installed, available, universe, cache</para>
  </sect1>

  <sect1><title>Server Messages</title>
  <para>addpackage, remove package, etc.</para>
  </sect1>

  
  <sect1><title>References</title>
  <para>The Package Universes Architecture document describes
  the philosophy and rationale behind Scala Bazaars, including
  many comparisons to existing systems.  It is easily findable
  using Google.</para>

  <para>There are a number of package-distribution systems used
  on the Internet nowadays.  Here are a few that inspired Scala
  Bazaars:</para>

  <itemizedlist>

  <listitem><para>Debian's Advanced Package Tool (APT)</para></listitem>

  <listitem><para>Yellowdog Update Manager (YUM)</para></listitem>

  <listitem><para>FreeBSD ports</para></listitem>

  <listitem><para>Comprehensive TeX Archive Network (CTAN)</para></listitem>

  <listitem><para>Comprehensive Perl Archive Network (CPAN)</para></listitem>

  <listitem><para>SqueakMap</para></listitem>

  <listitem><para>Fink</para></listitem>

  </itemizedlist>

  </sect1>


</article>
