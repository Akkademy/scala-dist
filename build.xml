<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->

<project name="scala-installer" default="dist.public">

  <description>
    This script is used to package up the different files for a scala distribution.
  </description>

<!-- ===========================================================================
END-USER TARGETS (support different kind of version numbers. Details:
                  https://mylamp.epfl.ch/wiki/scala/numbers)
============================================================================ -->
  <target name="dist.public"
    description="Creates a public distribution, e.g. 2.5.4.RC2">
    <property name="dist.version" value="dist.public"/>
    <antcall target="clean.all"/>
    <antcall target="dependencies.done"/>
    <antcall target="dist.done"/>
  </target>

  <target name="dist.development"
    description="Creates a development distribution, e.g. 2.5.4.r5894">
    <property name="dist.version" value="dist.development"/>
    <antcall target="clean.all"/>
    <antcall target="dependencies.done"/>
    <antcall target="dist.done"/>
  </target>

  <target name="dist.local"
    description="Creates a local distribution, e.g. 2.4.4.r4876-b20061102132844">
    <property name="dist.version" value="dist.local"/>
    <antcall target="clean.all"/>
    <antcall target="dependencies.done"/>
    <antcall target="dist.done"/>
  </target>

  <target name="dist.public-fast"
    description="Creates a public distribution. Cleans only the dist products (not the build products) of the core project.">
    <property name="dist.version" value="dist.public"/>
    <antcall target="clean.distonly"/>
    <antcall target="dependencies.done"/>
    <antcall target="dist.done"/>
  </target>

  <target name="dist.public-buildonly"
    description="Creates a public distribution. Does not build the dependencies, so make sure they're available!">
    <property name="dist.version" value="dist.public"/>
    <antcall target="build.clean"/>
    <antcall target="dist.clean"/>
    <antcall target="dist.done"/>
  </target>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>

  <!-- User properties -->
  <property file="${basedir}/build.properties"/>

  <!-- Installer folders -->
  <property name="dep.dir"           value="${basedir}/dependencies"/>
  <property name="src.dir"           value="${basedir}/src"/>
  <property name="build.dir"         value="${basedir}/build"/>
  <property name="build-install.dir" value="${build.dir}/install"/>
  <property name="build-sbaz.dir"    value="${build.dir}/sbaz"/>
  <property name="build-unix.dir"    value="${build.dir}/unix"/>
  <property name="build-win.dir"     value="${build.dir}/windows"/>
  <property name="dists.dir"         value="${basedir}/dists"/>

  <!-- Shortcuts for dependency folders -->
  <property name="dep-scala.dir"         value="${dep.dir}/scala"/>
  <property name="dep-scala-plugin.dir"  value="${dep.dir}/scala-plugin"/>
  <property name="dep-scala-library.dir" value="${dep.dir}/scala-library"/>
  <property name="dep-docu.dir"          value="${dep.dir}/scala-documentation"/>
  <property name="dep-sbaz.dir"          value="${dep.dir}/sbaz"/>
  <property name="dep-support.dir"       value="${dep.dir}/scala-tool-support"/>

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="init">
<!-- TODO: test what happens if ant-contrib is not here.
    <echo level="verbose" message="ant-contrib.jar=${ant-contrib.jar}"/>
    <fail message="Additional Ant tasks in '${core.lib.dir}/' is not available">
      <condition><not>
        <available
          classname="net.sf.antcontrib.AntContribVersion"
          classpath="${ant-contrib.jar}"
        />
      </not></condition>
    </fail>
    <fail message="External library ${ant-contrib.jar} requires the optional Ant tasks to be installed">
      <condition><not><and>
        <available file="${ant.home}/lib/ant-nodeps.jar"/>
      </and></not></condition>
    </fail> -->

    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${dep-scala.dir}/lib/ant/ant-contrib.jar"/>

    <tstamp prefix="time">
      <format property="human" pattern="d MMMM yyyy, HH:mm:ss"/>
      <format property="short" pattern="yyyyMMddHHmmss"/>
    </tstamp>

    <!-- Finding out SVN revision -->
    <exec executable="svn" outputproperty="svn.out">
      <arg line=" info ${basedir}"/>
    </exec>
    <propertyregex
      property="svn.number" input="${svn.out}" select="\1"
      regexp="Revision: ([0-9]+)"
      defaultValue="0"/>

    <!-- Generating version number -->
    <property file="${dep-scala.dir}/build.number"/>
    <!-- Default value for dist.version. Overwritten in the end-user targets (see above) -->
    <property name="dist.version" value="dist.development"/>
    <switch value="${dist.version}">
      <case value="dist.public">
        <property
            name="version.number"
            value="${version.major}.${version.minor}.${version.patch}.${version.suffix}"/>
      </case>
      <case value="dist.development">
        <property
            name="version.number"
            value="${version.major}.${version.minor}.${version.patch}.r${svn.number}"/>
      </case>
      <case value="dist.local">
        <property
            name="version.number"
            value="${version.major}.${version.minor}.${version.patch}.r${svn.number}-b${time.short}"/>
      </case>
    </switch>
    <echo level="info" message="Build number is '${version.number}'"/>
  </target>

<!-- ===========================================================================
DEPENDENCIES
============================================================================ -->
  <target name="dependencies.dist" depends="init">
    <!-- Sbaz has its own version number, not the one of the scala distribution -->
    <echo level="info" message="**installer** building sbaz"/>
    <ant dir="${dep.dir}/sbaz"       target="dist" inheritAll="false"/>
    <echo level="info" message="**installer** building sbaz-setup"/>
    <ant dir="${dep.dir}/sbaz-setup" target="dist" inheritAll="false"/>

    <echo level="info" message="**installer** building scala core project"/>
    <ant dir="${dep.dir}/scala" target="alldistpack" inheritAll="false">
      <property name="version.number" value="${version.number}"/>
    </ant>

    <echo level="info" message="**installer** building scala-library"/>
    <ant dir="${dep.dir}/scala-library" target="dist" inheritAll="false"/>

    <echo level="info" message="**installer** building scala-plugin"/>
    <ant dir="${dep.dir}/scala-plugin" target="dist" inheritAll="false">
      <property name="plugin.version.number" value="${version.number}"/>
    </ant>

    <ant dir="${dep.dir}/scala-documentation" target="dist" inheritAll="false">
      <property name="version.number" value="${version.number}"/>
    </ant>

    <echo level="info" message="**installer** building scala-tool-support"/>
    <ant dir="${dep.dir}/scala-tool-support" target="dist" inheritAll="false">
      <property name="version.number" value="${version.number}"/>
    </ant>
  </target>

  <target name="dependencies.done" depends="dependencies.dist"/>

  <target name="dependencies.clean">
    <echo level="info" message="**installer** cleaning sbaz"/>
    <ant dir="dependencies/sbaz" target="clean.all" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning sbaz-setup"/>
    <ant dir="dependencies/sbaz-setup" target="clean.all" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala core project"/>
    <ant dir="dependencies/scala" target="allallclean" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala-library"/>
    <ant dir="dependencies/scala-library" target="clean" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala-plugin"/>
    <ant dir="dependencies/scala-plugin" target="clean" inheritAll="false"/>
    <echo level="info" message="cleaning sbaz"/>
    <ant dir="dependencies/scala-documentation" target="clean.all" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala-tool-support"/>
    <ant dir="dependencies/scala-tool-support" target="clean.all" inheritAll="false"/>
  </target>

  <target name="dependencies.clean-distonly">
    <echo level="info" message="**installer** cleaning sbaz"/>
    <ant dir="dependencies/sbaz" target="clean.all" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning sbaz-setup"/>
    <ant dir="dependencies/sbaz-setup" target="clean.all" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala core project (only dist products)"/>
    <ant dir="dependencies/scala" target="distclean" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala-library"/>
    <ant dir="dependencies/scala-library" target="clean" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala-plugin"/>
    <ant dir="dependencies/scala-plugin" target="clean" inheritAll="false"/>
    <echo level="info" message="cleaning sbaz"/>
    <ant dir="dependencies/scala-documentation" target="clean.all" inheritAll="false"/>
    <echo level="info" message="**installer** cleaning scala-tool-support"/>
    <ant dir="dependencies/scala-tool-support" target="clean.all" inheritAll="false"/>
  </target>

<!-- ===========================================================================
BUILD
============================================================================ -->
  <target name="build.check-dependencies" depends="init">
    <!-- Testing if everything is in place -->
    <fail message="Scala dependency not in place.">
      <condition><not><and>
        <available file="${dep-scala.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Scala distribution not built.">
      <condition><not><and>
        <available file="${dep-scala.dir}/dists"/>
      </and></not></condition>
    </fail>
    <fail message="Scala documentation dependeny not in place.">
      <condition><not><and>
        <available file="${dep-docu.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Scala documentation not built properly.">
      <condition><not><and>
        <available file="${dep-docu.dir}/dists/latest/Changes.pdf"/>
        <available file="${dep-docu.dir}/dists/latest/ScalaByExample.pdf"/>
        <available file="${dep-docu.dir}/dists/latest/ScalaReference.pdf"/>
        <available file="${dep-docu.dir}/dists/latest/ScalaTutorial.pdf"/>
      </and></not></condition>
    </fail>
    <fail message="Scala tool support dependency not in place">
      <condition><not><and>
        <available file="${dep-support.dir}"/>
      </and></not></condition>
    </fail>
  </target>

  <!-- build/sbaz contains all sbaz packages that will be published for this
       build ('sbaz-setup' and 'base' are not included) -->
  <target name="build.sbaz" depends="build.check-dependencies">
    <property name="build-sbaz-cur.dir" value="${build-sbaz.dir}/scala-${version.number}"/>
    <mkdir dir="${build-sbaz-cur.dir}"/>

    <copy todir="${build-sbaz-cur.dir}">
      <fileset dir="${dep-scala.dir}/dists/sbaz"   includes="*.sbp,*.advert"/>
      <fileset dir="${dep-docu.dir}/dists/sbaz"    includes="*.sbp,*.advert"/>
      <fileset dir="${dep-support.dir}/dists/sbaz" includes="*.sbp,*.advert"/>
    </copy>

    <!-- Create gzip compressed tarball -->
    <mytar
      workdir="${build-sbaz.dir}"
      archive="scala-${version.number}-sbaz"
      includes="scala-${version.number}"
      compression="gzip"/>

    <!-- Create md5 checksums -->
    <checksum
      file="${build-sbaz.dir}/scala-${version.number}-sbaz.tar.gz"
      forceOverwrite="yes"
      fileext=".md5"/>
  </target>

  <!-- Create an sbaz installation in build/install. The unix / windows builds
       are then created by packing up this installation. -->
  <target name="build.install" depends="build.sbaz">
    <remove dir="${build-install.dir}"/>
    <mkdir dir="${build-install.dir}/sbaz"/>

    <!-- Install package 'sbaz' -->
    <fileset
	id="sbaz.sbp.id"
	dir="${dep.dir}/sbaz/dists"
	includes="sbaz-*.sbp"/>
    <property name="sbaz.sbp" refid="sbaz.sbp.id"/>
    <unzip src="${dep.dir}/sbaz/dists/${sbaz.sbp}" dest="${build-install.dir}/sbaz"/>
    <chmod dir="${build-install.dir}/sbaz/bin" perm="ugo+rx" excludes="*.bat"/>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${dep.dir}/sbaz/dists/${sbaz.sbp}"/>
    </exec>

    <!-- Install package 'sbaz-setup' -->
    <fileset
      id="sbaz-setup.sbp.id"
      dir="${dep.dir}/sbaz-setup/dists"
      includes="sbaz-setup-*.sbp"/>
    <property name="sbaz-setup.sbp" refid="sbaz-setup.sbp.id"/>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${dep.dir}/sbaz-setup/dists/${sbaz-setup.sbp}"/>
    </exec>

    <!-- Setup sbaz universe -->
    <if><equals arg1="final" arg2="${version.suffix}"/>
      <then>
        <exec executable="${build-install.dir}/sbaz/bin/sbaz">
          <arg line="setuniverse ${src.dir}/sbaz-universes/scala-dev"/>
        </exec>
      </then>
      <else>
        <exec executable="${build-install.dir}/sbaz/bin/sbaz">
          <arg line="setuniverse ${src.dir}/sbaz-universes/lamp-rc"/>
        </exec>
      </else>
    </if>

    <!-- Share the packages to the sbaz server and update the local descriptions. This way,
         the released dist will already know about the current version (being built now) -->
    <if><equals arg1="${sbaz.share}" arg2="true"/>
      <then>
        <for param="file">
          <path>
            <fileset
              dir="${build-sbaz-cur.dir}"
              includes="*.advert"/>
          </path>
          <sequential>
            <exec executable="echo">
              <arg line="sharing sbaz package: @{file}"/>
            </exec>
            <exec executable="${build-install.dir}/sbaz/bin/sbaz">
              <arg line="share @{file}"/>
            </exec>
          </sequential>
        </for>
      </then>
    </if>
    <!-- call sbaz update -->
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="update"/>
    </exec>

    <property
      name="version.notime"
      value="${version.major}.${version.minor}.${version.patch}"/>

    <!-- Install package 'scala-library' -->
    <fileset
      id="scala-lib.id"
      dir="${build-sbaz-cur.dir}"
      includes="scala-library-${version.notime}*.sbp"/>
    <property name="scala-lib.sbp" refid="scala-lib.id"/>
    <fail message="Required package '${build-sbaz-cur.dir}/${scala-lib.sbp}' is missing.">
      <condition><not><and>
        <available file="${build-sbaz-cur.dir}/${scala-lib.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build-sbaz-cur.dir}/${scala-lib.sbp}"/>
    </exec>

    <!-- Install package 'scala-devel' -->
    <fileset id="scala-devel.id"
      dir="${build-sbaz-cur.dir}"
      includes="scala-devel-${version.notime}*.sbp"/>
    <property name="scala-devel.sbp" refid="scala-devel.id"/>
    <fail message="Required package '${build-sbaz-cur.dir}/${scala-devel.sbp}' is missing.">
      <condition><not><and>
        <available file="${build-sbaz-cur.dir}/${scala-devel.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build-sbaz-cur.dir}/${scala-devel.sbp}"/>
    </exec>

    <!-- Install package 'scala' after 'scala-library/-devel' -->
    <fileset
      id="scala.id"
      dir="${build-sbaz-cur.dir}"
      includes="scala-${version.number}*.sbp"/>
    <property name="scala.sbp" refid="scala.id"/>
    <fail message="Required package '${build-sbaz-cur.dir}/${scala.sbp}' is missing.">
      <condition><not><and>
        <available file="${build-sbaz-cur.dir}/${scala.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build-sbaz-cur.dir}/${scala.sbp}"/>
    </exec>

    <!-- Install package 'base' after 'scala-library' -->
    <fileset
      id="base.sbp.id"
      dir="${dep.dir}/sbaz/dists"
      includes="base-*.sbp"/>
    <property name="base.sbp" refid="base.sbp.id"/>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${dep.dir}/sbaz/dists/${base.sbp}"/>
    </exec>

    <!-- Install package 'scala-tool-support' -->
    <fileset
      id="scala-support.id"
      dir="${build-sbaz-cur.dir}"
      includes="scala-tool-support-${version.number}*.sbp"
    />
    <property name="scala-support.sbp" refid="scala-support.id"/>
    <fail message="Required package '${build-sbaz-cur.dir}/${scala-support.sbp}' is missing.">
      <condition><not><and>
        <available file="${build-sbaz-cur.dir}/${scala-support.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build-sbaz-cur.dir}/${scala-support.sbp}"/>
    </exec>

    <!-- Clean up sbaz cache -->
    <exec executable="${build-install.dir}/sbaz/bin/sbaz">
      <arg line="compact"/>
    </exec>
  </target>


  <target name="build.unix" depends="build.install">
    <property name="build-unix-cur.dir" value="${build-unix.dir}/scala-${version.number}"/>
    <mkdir dir="${build-unix-cur.dir}"/>

    <!-- Set up root directory (unix) -->
    <!-- Note: We do not exclude bin/*.bat for Cygwin users -->
    <copy todir="${build-unix-cur.dir}">
      <fileset
        dir="${build-install.dir}/sbaz"
        excludes="**/context/**,**/latex/**,**/textpad/**,**/ultraedit/**"/>
    </copy>
    <fixcrlf srcdir="${build-unix-cur.dir}/bin" eol="unix"/>
    <chmod dir="${build-unix-cur.dir}/bin" perm="a+x" includes="**/*"/>

    <!-- Create gzip compressed tarball -->
    <mytar
      workdir="${build-unix.dir}"
      archive="scala-${version.number}"
      includes="scala-${version.number}"
      compression="gzip"/>

    <!-- Create md5 checksum -->
    <checksum
      file="${build-unix.dir}/scala-${version.number}.tar.gz"
      forceOverwrite="yes"
      fileext=".md5"/>

    <!-- Set up 'latest' directory (copy on windows, symlink on unix) -->
    <symlink
      link="${build-unix.dir}/latest"
      resource="${build-unix-cur.dir}"
      overwrite="yes"
      failonerror="no"/>
  </target>

  <target name="build.win" depends="build.unix">
    <property name="build-win-cur.dir" value="${build-win.dir}/scala-${version.number}"/>
    <mkdir dir="${build-win-cur.dir}"/>

    <!-- Set up root directory (win) -->
    <copy todir="${build-win-cur.dir}">
      <fileset
        dir="${build-install.dir}/sbaz"
        excludes="lib/fjbg.jar,man/**,**/gedit/**,**/kate/**,**/latex/**,**/xcode/**"/>
    </copy> <!-- TODO: fjbg is not there anyway!?! not exclude latex!?! -->
    <fixcrlf
      srcdir="${build-win-cur.dir}" eol="dos"
      includes="**/*.bat,**/*.css,**/*.html,**/*.scala,**/LICENSE,**/README"/>

    <!-- Create zip archive -->
    <zip
      destfile="${build-win.dir}/scala-${version.number}.zip"
      basedir="${build-win.dir}"
      includes="scala-${version.number}/**"/>
    <checksum
      file="${build-win.dir}/scala-${version.number}.zip"
      forceOverwrite="yes"
      fileext=".md5"/>

    <!-- Set up 'latest' directory (copy on windows, symlink on unix) -->
    <symlink
      link="${build-win.dir}/latest"
      resource="${build-win-cur.dir}"
      overwrite="yes"
      failonerror="no"/>
  </target>

  <target name="build.done" depends="build.win"/>

  <target name="build.clean">
    <remove dir="${build.dir}"/>
  </target>

<!-- ===========================================================================
DISTRIBUTION
============================================================================ -->
  <target name="dist.start" depends="build.done">
    <property name="dists-cur.dir" value="${dists.dir}/scala-${version.number}"/>
    <mkdir dir="${dists-cur.dir}"/>
  </target>

  <target name="dist.copy" depends="dist.start">
    <copy todir="${dists-cur.dir}">
      <fileset dir="${build-sbaz.dir}" includes="*.tar.gz,*.md5"/>
      <fileset dir="${build-unix.dir}" includes="*.tar.gz,*.md5"/>
      <fileset dir="${build-win.dir}"  includes="*.zip,*.md5"/>
      <fileset dir="${dep-scala.dir}/dists/archives" includes="*-sources.tgz,*-sources.tgz.md5"/>
      <fileset dir="${dep-scala.dir}/dists/archives" includes="*-api.tgz,*-api.tgz.md5"/>
      <fileset dir="${dep-scala.dir}/dists/archives" includes="*-jvm4.tgz,*-jvm4.tgz.md5"/>
      <fileset dir="${dep-scala-plugin.dir}/dist" includes="scala.update/**,ch.epfl.lamp.sdt_*.zip,ch.epfl.lamp.sdt_*.zip.md5"/>
      <fileset dir="${dep-scala-library.dir}" includes="scala.library_*.jar,scala.library_*.jar.md5"/>
    </copy>
    <move file="${dists-cur.dir}/scala.update"
          tofile="${dists-cur.dir}/scala-plugin-${version.number}"/>

    <symlink
      link="${dists.dir}/latest"
      resource="${dists-cur.dir}"
      overwrite="yes"
      failonerror="no"/>
  </target>

  <target name="dist.done" depends="dist.copy"/>

  <target name="dist.clean">
    <remove dir="${dists.dir}"/>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <target name="clean" depends="clean.all"/>
  <target name="clean.all" depends="dependencies.clean, build.clean, dist.clean"/>
  <target name="clean.distonly" depends="dependencies.clean-distonly, build.clean, dist.clean"/>

<!-- ===========================================================================
MACROS
============================================================================ -->

  <!-- create Unix tarballs while preserving permissions and symlinks -->
  <!-- Ant task 'tar' can't do that (it's java-based). -->
  <macrodef name="mytar">
    <attribute name="workdir"/>
    <attribute name="archive"/>
    <attribute name="includes"/>
    <attribute name="compression"/>
    <sequential>
      <exec dir="@{workdir}" executable="tar">
        <arg line="cf @{archive}.tar @{includes}"/>
      </exec>
      <exec dir="@{workdir}" executable="@{compression}">
        <arg line="-f9 @{archive}.tar"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}"
              includeemptydirs="yes"
              quiet="yes"
              failonerror="no"/>
    </sequential>
  </macrodef>

</project>
