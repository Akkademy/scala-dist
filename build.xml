<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->

<project name="scala-documentation" basedir="." default="build">

  <description>
    I am SABBUS for ${ant.project.name}, the build system for the Scala documentation.
    Please check the 'docs/README' file for more information about me.
  </description>

  <echo>Running Sabbus for ${ant.project.name}</echo>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>

  <property name="bin.dir"            value="${basedir}/bin"/>
  <property name="src.dir"            value="${basedir}/src"/>
  <property name="src.tour.dir"       value="${basedir}/src/tour"/>
  <property name="src.reference.dir"  value="${basedir}/src/reference"/>
  <property name="src.tutorial.dir"   value="${basedir}/src/tutorial"/>
  <property name="lib.dir"            value="${basedir}/lib"/>
  <property name="build.dir"          value="${basedir}/build"/>
  <property name="build.tour.dir"     value="${build.dir}/tour"/>
  <property name="build.images.dir"   value="${build.tour.dir}/images"/>
  <property name="dist.dir"           value="${basedir}/dists"/>
  <property name="dist.latest.dir"    value="${dist.dir}/latest"/>
  <property name="dist.sbaz.dir"      value="${dist.dir}/sbaz"/>

  <!-- User properties -->
  <property file="${basedir}/build.properties"/>

  <!-- Location of pre-compiled libraries properties -->
  <property name="scala.starr.dir"    value="${user.home}/scala"/>
  <property name="number.file"        value="${scala.starr.dir}/build.number"/>
  <property name="scala.lib.dir"      value="${scala.starr.dir}/lib"/>  
  <property name="lib.starr.jar"      value="${scala.lib.dir}/scala-library.jar"/>
  <property name="comp.starr.jar"     value="${scala.lib.dir}/scala-compiler.jar"/>
  <property name="ant-contrib.jar"    value="${scala.lib.dir}/ant-contrib.jar"/>

  <!-- website properties -->
  <property name="website.dir"        value="${user.home}/scala-website"/>
  <property name="website.src.dir"    value="${website.dir}/sources"/>
  <property name="website.images.dir" value="${website.src.dir}/images"/>

  <!-- sbaz properties -->
  <property name="sbaz.doc.name"      value="scala-documentation"/>
  <property name="sbaz.universe"      value="http://scala-lang.org/downloads/packages"/>
  <property name="version.separator"  value="."/>

  <!-- tour properties -->
  <property name="tour.excludes"     value="**/coercions.*"/>

<!-- ===========================================================================
INIT
============================================================================ -->

  <target name="ant-init">
  <!-- Making sure lib/ contains everything that is needed -->
    <fail message="A required library is missing in '${scala.lib.dir}/'. The README file describes what should be there.">
      <condition><not><and>
        <available file="${lib.starr.jar}"/>
        <available file="${comp.starr.jar}"/>
        <available file="${ant-contrib.jar}"/>
      </and></not></condition>
    </fail>
  <!-- Setting-up Ant contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"
             classpath="${ant-contrib.jar}"/>
    <fail message="External library ${ant-contrib.jar} requires the optional Ant tasks to be installed">
      <condition><not><and>
        <available file="${ant.home}/lib/ant-nodeps.jar"/>
      </and></not></condition>
    </fail>
  </target>

  <target name="init" depends="ant-init">
    <tstamp prefix="time">
      <format
        property="human"
        pattern="EEEE, d MMMM yyyy, HH:mm:ss (zz)"
      />
      <format
        property="short"
        pattern="yyyyMMdd-HHmmss"
      />
    </tstamp>
    <!-- Checking resource dependencies -->
    <fail message="External file ${number.file} is missing">
      <condition><not><and>
        <available file="${number.file}" type="file"/>
      </and></not></condition>
    </fail>
    <fail message="External directory ${website.dir} is missing">
      <condition><not><and>
        <available file="${website.dir}" type="dir"/>
      </and></not></condition>
    </fail>
    <!-- Finding out SVN revision -->
    <exec
      executable="svn" vmlauncher="no"
      errorproperty="svn.err" outputproperty="svn.out">
      <arg line=" info ${basedir}"/>
    </exec>
    <propertyregex
      property="svn.number" input="${svn.out}" select="\1"
      regexp="Revision: ([0-9]+)"
      defaultValue="x"
    />
  </target>

  <target name="build.init" depends="init">
    <!-- Finding out what system architecture is being used -->
    <condition property="os.win">
      <os family="windows"/>
    </condition>
    <if><isset property="os.win"/>
      <then>
        <exec executable="cygpath"
              vmlauncher="no"
              errorproperty="cygpath.err"
              outputproperty="cygpath.out">
          <arg value="--windir"/>
        </exec>
        <condition property="os.cygwin">
          <equals arg1="${cygpath.err}" arg2=""/>
        </condition>
      </then>
    </if>
    <condition property="os.unix">
      <or>
        <os family="unix"/>
        <os family="mac"/>
        <isset property="os.cygwin"/>
      </or>
    </condition>
    <path id="scala.classpath">
      <pathelement location="${lib.starr.jar}"/>
      <pathelement location="${comp.starr.jar}"/>
    </path>
    <taskdef
      name="sbaz"
      classname="scala.tools.ant.ScalaBazaar"
      classpathref="scala.classpath"
    />
    <!-- Generating version number -->
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}.${time.short}"
    />
    <echo level="verbose" message="version.number=${version.number}"/>
    <mkdir dir="${build.dir}"/>
    <uptodate
      property="uptodate.changes"
      srcfile="${src.reference.dir}/Changes.tex"
      targetfile="${build.dir}/Changes.pdf"
    />
    <uptodate
      property="uptodate.tour"
      srcfile="${src.tour.dir}/ScalaTour.tex"
      targetfile="${build.dir}/ScalaTour.pdf"
    />
    <uptodate
      property="uptodate.programming"
      srcfile="${src.reference.dir}/ProgrammingInScala.tex"
      targetfile="${build.dir}/ProgrammingInScala.pdf"
    />
    <uptodate
      property="uptodate.byexample"
      srcfile="${src.reference.dir}/ScalaByExample.tex"
      targetfile="${build.dir}/ScalaByExample.pdf"
    />
    <uptodate
      property="uptodate.rationale"
      srcfile="${src.reference.dir}/ScalaRationale.tex"
      targetfile="${build.dir}/ScalaRationale.pdf"
    />
    <uptodate
      property="uptodate.reference"
      srcfile="${src.reference.dir}/ScalaReference.tex"
      targetfile="${build.dir}/ScalaReference.pdf"
    />
    <uptodate
      property="uptodate.tutorial"
      srcfile="${src.tutorial.dir}/ScalaTutorial.tex"
      targetfile="${build.dir}/ScalaTutorial.pdf"
    />
  </target>

<!-- ===========================================================================
BUILD
============================================================================ -->

  <target
    name="build.docu"
    depends="build.byexample,build.reference,build.tutorial"
  />

  <target
    name="build.others"
    depends="build.changes,build.tour,build.programming,build.rationale"
  />

  <target
    name="build"
    depends="build.docu,build.others"
  />

  <macrodef name="latex">
    <attribute name="name"/>
    <attribute name="srcdir"/>
    <sequential>
      <!-- we use 'exec' until a 'latexmk' task is available :-) -->
      <exec dir="${build.dir}" executable="latexmk" output="${build.dir}/@{name}.log.ant">
        <env key="TEXINPUTS" value="${lib.dir}:@{srcdir}:"/>
        <env key="BIBINPUTS" value="@{srcdir}:"/>
        <arg line="-g -pdf @{srcdir}/@{name}"/>
      </exec>
      <exec dir="${build.dir}" executable="pdf2ps"> <!-- pdftops -->
        <arg line="@{name}.pdf @{name}.ps"/>
      </exec>
      <gzip
        src="${build.dir}/@{name}.ps"
        destfile="${build.dir}/@{name}.ps.gz"
      />
    </sequential>
  </macrodef>

  <target name="build.changes" depends="build.init" unless="uptodate.changes">
    <latex name="Changes" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.tour" depends="init.tour" unless="uptodate.tour">
    <latex name="ScalaTour" srcdir="${build.tour.dir}"/>
  </target>

  <target name="build.programming" depends="build.init" unless="uptodate.programming">
    <latex name="ProgrammingInScala" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.byexample" depends="build.init" unless="uptodate.byexample">
    <latex name="ScalaByExample" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.rationale" depends="build.init" unless="uptodate.rationale">
    <latex name="ScalaRationale" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.reference" depends="build.init" unless="uptodate.reference">
    <latex name="ScalaReference" srcdir="${src.reference.dir}"/>
  </target>

  <target name="build.tutorial" depends="build.init" unless="uptodate.tutorial">
    <latex name="ScalaTutorial" srcdir="${src.tutorial.dir}"/>
  </target>

  <macrodef name="convert">
    <attribute name="in"/>
    <attribute name="out"/>
    <attribute name="resize" default="100%"/>
    <attribute name="sharpen" default="0.1"/>
    <sequential>
      <exec executable="convert">
        <arg line="-resize @{resize} -sharpen @{sharpen} -flatten -trim PNG:@{in}.png EPS:@{out}.eps"/>
      </exec>
      <exec executable="convert">
        <arg line="-resize @{resize} -sharpen @{sharpen} -flatten -trim PNG:@{in}.png PDF:@{out}.pdf"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="lbraces">
    <sequential>
      <fileset id="xmlfiles" dir="${website.src.dir}">
        <include name="intro/*.xml"/>
      </fileset>
      <pathconvert targetos="unix" pathsep=" " property="files" refid="xmlfiles">
      </pathconvert>
      <echo level="verbose">files=${files}</echo>
      <mkdir dir="${build.tour.dir}/tour"/>
      <exec dir="${build.tour.dir}" executable="${bin.dir}/lbraces.sh">
        <env key="SOURCEDIR" value="${website.src.dir}"/>
        <env key="BUILDDIR" value="${build.tour.dir}"/>
        <arg value="${files}"/>
      </exec>
    </sequential>
  </macrodef>

  <macrodef name="escapes">
    <sequential>
      <exec dir="${build.tour.dir}" executable="${bin.dir}/escapes.sh">
        <env key="BUILDDIR" value="${build.tour.dir}"/>
        <arg value="${build.tour.dir}/MainPart.tex"/>
      </exec>
    </sequential>
  </macrodef>

  <target name="init.tour" depends="build.init">
    <copy todir="${build.tour.dir}">
      <fileset dir="${lib.dir}" includes="*.sty"/>
      <fileset dir="${src.dir}" includes="**/*.bib"/>
      <fileset dir="${website.src.dir}" includes="default.*"/>
      <flattenmapper/>
    </copy>
    <mkdir dir="${build.images.dir}"/>
    <convert
      in="${website.images.dir}/classhierarchy"
      out="${build.images.dir}/classhierarchy"
      resize="80%"
    />
    <convert
      in="${website.images.dir}/colpoint2d"
      out="${build.images.dir}/colpoint2d"
    />
    <convert
      in="${website.images.dir}/colpoint3d"
      out="${build.images.dir}/colpoint3d"
    />
    <convert
      in="${website.images.dir}/scala_logo"
      out="${build.images.dir}/scala_logo"
    />
    <lbraces/>
    <copy todir="${build.dir}">
      <fileset
        dir="${src.dir}"
        includes="tour/**"
      />
    </copy>
    <!-- tex files are appended in alphabetic order ! -->
    <move
      file="${build.tour.dir}/tour/index.xml"
      tofile="${build.tour.dir}/tour/0index.xml"
    />
    <xslt
      basedir="${build.tour.dir}"
      destdir="${build.tour.dir}"
      includes="tour/*.xml"
      extension=".tex"
      style="${build.tour.dir}/ScalaTour.xsl">
      <!-- <param name="date" expression="07-01-2000"/> -->
    </xslt>
    <concat destfile="${build.tour.dir}/MainPart.tex" append="true">
      <fileset
        dir="${build.tour.dir}"
        includes="tour/*.tex"
        excludes="${tour.excludes}"
      />
    </concat>
    <!-- some regexp substitutions -->
    <escapes/>
<!-- ================== DISABLED ====================
     Task 'replaceregexp' doesn't accept
     a backslash character in the attribute 'replace'
     ================================================
    <replaceregexp match="\u0025 2" replace="&#92; 2" flags="g" byline="true">
      <fileset
        dir="${build.tour.dir}"
        includes="MainPart.tex"
      />
    </replaceregexp>
    <replaceregexp match="\u003c%" replace="\u003c\\%" flags="g" byline="true">
      <fileset
        dir="${build.tour.dir}"
        includes="MainPart.tex"
      />
    </replaceregexp>
    <replaceregexp match="#Node" replace="\\#Node" flags="g" byline="true">
      <fileset
        dir="${build.tour.dir}"
        includes="MainPart.tex"
      />
    </replaceregexp>
    <replaceregexp match="{_" replace="{\\_" flags="g" byline="true">
      <fileset
        dir="${build.tour.dir}"
        includes="MainPart.tex"
      />
    </replaceregexp>
-->
  </target>

<!-- ===========================================================================
DIST
============================================================================ -->

  <target name="dist.devel" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}"
    />
    <runtarget target="dist"/>
  </target>

  <target name="dist.patch" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.suffix}"
    />
    <runtarget target="dist"/>
  </target>

  <target name="dist.minor" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.suffix}"
    />
    <runtarget target="dist"/>
  </target>

  <target name="dist" depends="clean.all,build">
    <property
      name="dist.current.dir"
      value="${dist.dir}/${sbaz.doc.name}-${version.number}"
    />
    <copy todir="${dist.current.dir}">
      <fileset
        dir="${build.dir}"
        includes="**/*.pdf,**/*.ps.gz"
      />
    </copy>
    <!-- Create the SBaz packages -->
    <mkdir dir="${dist.sbaz.dir}"/>
    <!-- Create the Scala documentation package -->
    <sbaz
      file="${dist.sbaz.dir}/${sbaz.doc.name}-${version.number}.sbp"
      adfile="${dist.sbaz.dir}/${sbaz.doc.name}-${version.number}.advert"
      name="${sbaz.doc.name}"
      version="${version.number}"
      desc="The Scala documentation."
      link="${sbaz.universe}/${sbaz.doc.name}-${version.number}.sbp"
    >
      <docset
        dir="${build.dir}"
        includes="ScalaByExample.pdf,ScalaReference.pdf,ScalaTutorial.pdf"
      />
    </sbaz>
    <if><isset property="os.win"/>
      <then>
        <copy todir="${dist.latest.dir}">
          <fileset dir="${dist.current.dir}"/>
        </copy>
      </then>
      <else>
        <symlink
          link="${dist.latest.dir}"
          resource="${dist.current.dir}"
          overwrite="yes"
          failonerror="no"
        />
      </else>
    </if>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete
        dir="@{dir}"
        includeemptydirs="yes"
        quiet="yes"
        failonerror="no"
      />
    </sequential>
  </macrodef>

  <target
    name="clean"
    depends="clean.build"
    description="Deletes all generated build files."
  />

  <target name="clean.build">
    <remove dir="${build.dir}"/>
  </target>

  <target name="clean.all">
    <remove dir="${build.dir}"/>
    <remove dir="${dist.dir}"/>
  </target>

</project>
