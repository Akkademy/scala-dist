<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: $ -->

<project name="scala-installer" default="build">

  <description>
    I am SABBUS for ${ant.project.name}, the build system for the Scala installer.
    Please check the 'docs/README' file for more information about me.
  </description>

  <echo>Running SABBUS for ${ant.project.name}...</echo>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>

  <!-- Base properties -->
  <property name="bin.dir"           value="${basedir}/bin"/>
  <property name="build.dir"         value="${basedir}/build"/>
  <property name="build.izpack.dir"  value="${build.dir}/izpack"/>
  <property name="build.install.dir" value="${build.dir}/install"/>
  <property name="build.sbaz.dir"    value="${build.dir}/sbaz"/>
  <property name="build.unix.dir"    value="${build.dir}/unix"/>
  <property name="build.win.dir"     value="${build.dir}/windows"/>
  <property name="dep.dir"           value="${basedir}/dependencies"/>
  <property name="dist.dir"          value="${basedir}/dists"/>
  <property name="lib.dir"           value="${basedir}/lib"/>
  <property name="src.dir"           value="${basedir}/src"/>
  <!-- User properties -->
  <property file="${basedir}/build.properties"/>
  <!-- SVN configuration properties -->
  <property name="svn.entries" value="${basedir}/.svn/entries"/>
  <!-- Location of pre-compiled libraries properties -->
  <property name="izpack.jar"        value="${lib.dir}/standalone-compiler.jar"/>
  <property name="msil.jar"          value="${lib.dir}/msil.jar"/>
  <property name="scala.dll"         value="${lib.dir}/scala.dll"/>
  <!-- Dependencies to module 'scala' -->
  <property name="core.dir"          value="${dep.dir}/scala"/>
  <property name="core.dist.dir"     value="${core.dir}/dists"/>
  <property name="core.doc.dir"      value="${core.dir}/docs"/>
  <property name="core.lib.dir"      value="${core.dir}/lib"/>
  <property name="core.src.dir"      value="${core.dir}/src"/>
  <property name="core.latest.dir"   value="${core.dist.dir}/latest"/>
  <property name="core.sbaz.dir"     value="${core.dist.dir}/sbaz"/>
  <property name="ant-contrib.jar"   value="${core.lib.dir}/ant-contrib.jar"/>
  <property name="number.file"       value="${core.dir}/build.number"/>
  <!-- Dependencies to module 'scala-documentation' -->
  <property name="docu.dir"          value="${dep.dir}/scala-documentation"/>
  <property name="docu.dist.dir"     value="${docu.dir}/dists"/>
  <property name="docu.latest.dir"   value="${docu.dist.dir}/latest"/>
  <property name="docu.sbaz.dir"     value="${docu.dist.dir}/sbaz"/>
  <!-- Dependencies to module 'sbaz' -->
  <property name="sbaz.dir"          value="${dep.dir}/sbaz"/>
  <!-- Dependencies to module 'scalap' -->
  <property name="scalap.dir"        value="${dep.dir}/scalap"/>
  <property name="scalap.jar.name"   value="scala-decoder.jar"/>
  <property name="scalap.dist.dir"   value="${scalap.dir}/dists"/>
  <property name="scalap.latest.dir" value="${scalap.dist.dir}/latest"/>
  <property name="scalap.sbaz.dir"   value="${scalap.dist.dir}/sbaz"/>
  <!-- Dependencies to module 'scala-tool-support' -->
  <property name="support.dir"        value="${dep.dir}/scala-tool-support"/>
  <property name="support.dist.dir"   value="${support.dir}/dists"/>
  <property name="support.latest.dir" value="${support.dist.dir}/latest"/>
  <property name="support.sbaz.dir"   value="${support.dist.dir}/sbaz"/>
  <!-- Distribution properties -->
  <property name="dist.name"          value="scala"/>
  <property name="dist.latest.dir"    value="${dist.dir}/latest"/>
  <property name="dist.sbaz.dir"      value="${dist.dir}/sbaz"/>

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="init" unless="init.avail">
    <tstamp prefix="time">
      <format property="human"
              pattern="EEEE, d MMMM yyyy, HH:mm:ss (zz)"/>
      <format property="short"
              pattern="yyyyMMdd-HHmmss"/>
    </tstamp>
    <echo level="verbose" message="ant-contrib.jar=${ant-contrib.jar}"/>
    <fail message="Additional Ant tasks in '${core.lib.dir}/' is not available">
      <condition><not>
        <available
          classname="net.sf.antcontrib.AntContribVersion"
          classpath="${ant-contrib.jar}"
        />
      </not></condition>
    </fail>
    <!-- Creating boot-level tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${ant-contrib.jar}"/>
      </classpath>
    </taskdef>
    <property name="init.avail" value="true"/>
  </target>

  <target name="build.init" depends="init">
    <!-- Testing if everything is in place -->
    <echo level="verbose">core.dir=${core.dir}</echo>
    <fail message="Required Scala core is missing; check the 'core.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${core.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala distribution is missing; run command 'ant dist' in the directory specified by the 'core.dir' property.">
      <condition><not><and>
        <available file="${core.dist.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose">docu.dir=${docu.dir}</echo>
    <fail message="Required Scala documentation is missing; check the 'docu.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${docu.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala documents are missing; run command 'ant dist' in the directory specified by the 'docu.dir' property.">
      <condition><not><and>
        <available file="${docu.latest.dir}/Changes.pdf"/>
        <available file="${docu.latest.dir}/ScalaByExample.pdf"/>
        <available file="${docu.latest.dir}/ScalaRationale.pdf"/>
        <available file="${docu.latest.dir}/ScalaReference.pdf"/>
        <available file="${docu.latest.dir}/ScalaTutorial.pdf"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala tool 'scalap' is missing; run command 'ant dist' in the directory specified by the 'scalap.dir' property.">
      <condition><not><and>
        <available file="${scalap.dist.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose">support.dir=${support.dir}</echo>
    <fail message="Required Scala support is missing; check the 'support.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${support.dir}"/>
      </and></not></condition>
    </fail>
    <!-- Finding out what system architecture is being used -->
    <condition property="os.win">
      <os family="windows"/>
    </condition>
    <if><isset property="os.win"/>
      <then>
        <exec executable="cygpath"
              vmlauncher="no"
              errorproperty="cygpath.err"
              outputproperty="cygpath.out">
          <arg value="--windir"/>
        </exec>
        <condition property="os.cygwin">
          <equals arg1="${cygpath.err}" arg2=""/>
        </condition>
      </then>
    </if>
    <condition property="os.unix">
      <or>
        <os family="unix"/>
        <os family="mac"/>
        <isset property="os.cygwin"/>
      </or>
    </condition>
    <!-- Finding out SVN revision -->
    <loadfile property="entries"
              srcFile="${svn.entries}"
              failonerror="false"/>
    <propertyregex property="svn.revision"
                   input="${entries}"
                   regexp="revision=\042([0-9]*)\042\.*"
                   select="\1"
                   defaultValue="x"/>
    <!-- Generating version number -->
    <property file="${number.file}"/>
    <property
             name="version.number"
             value="${version.major}.${version.minor}.${version.patch}.${svn.revision}.${time.short}"/>
    <echo level="verbose" message="version.number=${version.number}"/>
    <property name="dist.archive"           value="${dist.name}-${version.number}"/>
    <!-- Structure of the Unix build-->
    <property name="unix.build.cur.dir"     value="${build.unix.dir}/${dist.archive}"/>
    <property name="unix.build.share.dir"   value="${unix.build.cur.dir}/share"/>
    <property name="unix.build.doc.dir"     value="${unix.build.share.dir}/doc/${dist.name}"/>
    <property name="unix.build.latest.dir"  value="${build.unix.dir}/latest"/>
    <property name="unix.build.man.dir"     value="${unix.build.share.dir}/man"/>
    <property name="unix.build.scala.dir"   value="${unix.build.share.dir}/${dist.name}"/>
    <property name="unix.build.bin.dir"     value="${unix.build.scala.dir}/bin"/>
    <property name="unix.build.lib.dir"     value="${unix.build.scala.dir}/lib"/>
    <property name="unix.build.support.dir" value="${unix.build.scala.dir}/support"/>
    <property name="unix.build.test.dir"    value="${unix.build.scala.dir}/test"/>
    <!-- Structure of the Windows build -->
    <property name="win.build.cur.dir"      value="${build.win.dir}/${dist.archive}"/>
    <property name="win.build.bin.dir"      value="${win.build.cur.dir}/bin"/>
    <property name="win.build.doc.dir"      value="${win.build.cur.dir}/doc"/>
    <property name="win.build.latest.dir"   value="${build.win.dir}/latest"/>
    <property name="win.build.examples.dir" value="${win.build.cur.dir}/examples"/>
    <property name="win.build.scala.dir"    value="${win.build.cur.dir}"/>
    <property name="win.build.lib.dir"      value="${win.build.scala.dir}/lib"/>
    <property name="win.build.support.dir"  value="${win.build.scala.dir}/support"/>
  </target>

<!-- ===========================================================================
FULL DISTRIBUTION
============================================================================ -->

  <target name="build" depends="build.unix,build.win,build.izpack"
          description="Creates a full Scala distribution."/>

  <target name="build.sbaz" unless="build.sbaz.avail"
          description="">
    <copy todir="${build.sbaz.dir}" overwrite="true">
      <fileset dir="${core.sbaz.dir}"    includes="*.sbp,*.advert"/>
      <fileset dir="${scalap.sbaz.dir}"  includes="*.sbp,*.advert"/>
      <fileset dir="${docu.sbaz.dir}"    includes="*.sbp,*.advert"/>
      <fileset dir="${support.sbaz.dir}" includes="*.sbp,*.advert"/>
    </copy>
    <remove dir="${build.install.dir}"/>
    <unzip src="${lib.dir}/sbaz-boot.zip" dest="${build.install.dir}"/>
    <chmod dir="${build.install.dir}/sbaz/bin" perm="ugo+rx" excludes="*.bat"/>
    <property name="version.public" value="${version.major}.${version.minor}.${version.patch}"/>
    <!-- Install package 'scala-library' -->
    <fileset
      id="scala.lib.id"
      dir="${build.sbaz.dir}"
      includes="scala-library-${version.public}*.sbp"
    />
    <property name="scala.lib.sbp" refid="scala.lib.id"/>
    <echo
      level="info"
      message="Installing package ${scala.lib.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scala.lib.sbp}"/>
    </exec>
    <!-- Install package 'scala-devel' -->
    <fileset id="scala.devel.id"
      dir="${build.sbaz.dir}"
      includes="scala-devel-${version.public}*.sbp"
    />
    <property name="scala.devel.sbp" refid="scala.devel.id"/>
    <echo
      level="info"
      message="Installing package ${scala.devel.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scala.devel.sbp}"/>
    </exec>
    <!-- Install package 'scalac' (needed by 'scalap') -->
    <fileset
      id="scalac.id"
      dir="${build.sbaz.dir}"
      includes="scalac-${version.public}*.sbp"
    />
    <property name="scalac.sbp" refid="scalac.id"/>
    <echo
      level="info"
      message="Installing package ${scalac.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scalac.sbp}"/>
    </exec>
    <!-- Install package 'scalap' (depends on 'scalac') -->
    <fileset
      id="scalap.id"
      dir="${build.sbaz.dir}"
      includes="scalap-${version.public}*.sbp"
    />
    <property name="scalap.sbp" refid="scalap.id"/>
    <echo
      level="info"
      message="Installing package ${scalap.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scalap.sbp}"/>
    </exec>
    <!-- Install package 'scala-documentation' -->
    <fileset
      id="scala.docu.id"
      dir="${build.sbaz.dir}"
      includes="scala-documentation-${version.public}*.sbp"
    />
    <property name="scala.docu.sbp" refid="scala.docu.id"/>
    <echo
      level="info"
      message="Installing package ${scala.docu.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scala.docu.sbp}"/>
    </exec>
    <!-- Install package 'scala-tool-support' -->
    <fileset
      id="scala.support.id"
      dir="${build.sbaz.dir}"
      includes="scala-tool-support-${version.public}*.sbp"
    />
    <property name="scala.support.sbp" refid="scala.support.id"/>
    <echo
      level="info"
      message="Installing package ${scala.support.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scala.support.sbp}"/>
    </exec>
    <!-- Package scala-2.x.x-*.sbp should be last -->
    <fileset
      id="scala.id"
      dir="${build.sbaz.dir}"
      includes="scala-${version.public}*.sbp"
    />
    <property name="scala.sbp" refid="scala.id"/>
    <echo
      level="info"
      message="Installing package ${scala.sbp}..."
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${build.sbaz.dir}/${scala.sbp}"/>
    </exec>
    <!-- Clean up sbaz cache -->
    <echo
      level="info"
      message="Compacting sbaz-managed directory '${build.install.dir}/sbaz"
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="compact"/>
    </exec>
    <property name="build.sbaz.avail" value="true"/>
  </target>

  <target name="build.unix" depends="build.init,build.sbaz"
          description="Creates a full Scala distribution for Unix.">
    <!-- Set up 'share/scala' directory (unix) -->
    <copy todir="${unix.build.scala.dir}">
      <fileset
        dir="${build.install.dir}/sbaz"
        excludes="bin/*.bat,**/context/**,**/latex/**,**/textpad/**,**/ultraedit/**"
      />
    </copy>
    <fixcrlf srcdir="${unix.build.bin.dir}" eol="unix"/>
    <chmod dir="${unix.build.bin.dir}" perm="a+x" includes="**/*"/>
    <tar destfile="${unix.build.scala.dir}/src.tar.gz"
         basedir="${core.src.dir}" includes="scala/**/*.scala"
         compression="gzip"/>
    <!-- Set up 'bin' directory (unix) -->
    <mkdir dir="${unix.build.cur.dir}/bin"/>
    <symlink.bin
      file="${src.dir}/bin/symlink.tmpl"
      tofile="${unix.build.cur.dir}/bin/.symlink"
    />
    <!-- Set up 'share/doc' directory (unix) -->
    <mkdir dir="${unix.build.doc.dir}"/>
    <symlink.doc
      file="${src.dir}/bin/symlink.tmpl"
      tofile="${unix.build.doc.dir}/.symlink"
    />
    <!-- Set up 'share/man/man1' directory (unix) -->
    <mkdir dir="${unix.build.man.dir}/man1"/>
    <symlink.man
      file="${src.dir}/bin/symlink.tmpl"
      tofile="${unix.build.man.dir}/man1/.symlink"
    />
    <!-- Create gz and bz2 compressed tarballs -->
    <mytar dir="${build.unix.dir}" archive="${dist.archive}"
           compression="gzip"/>
    <mytar dir="${build.unix.dir}" archive="${dist.archive}"
           compression="bzip2"/>
    <!-- Create md5 checksums -->
    <checksum file="${build.unix.dir}/${dist.archive}.tar.gz"
              forceOverwrite="yes" fileext=".md5"/>
    <checksum file="${build.unix.dir}/${dist.archive}.tar.bz2"
              forceOverwrite="yes" fileext=".md5"/>
    <!-- Set up 'latest' directory (unix) -->
    <if><isset property="os.win"/>
      <then>
        <copy todir="${unix.build.latest.dir}">
          <fileset dir="${unix.build.cur.dir}"/>
        </copy>
      </then>
      <else>
        <symlink link="${unix.build.latest.dir}"
                 resource="${unix.build.cur.dir}"
                 overwrite="yes"
                 failonerror="no"/>
      </else>
    </if>
  </target>

  <target name="build.mac" depends="build.unix"/>

  <target name="build.win" depends="build.init,build.sbaz"
          description="Creates a full Scala distribution for Windows.">
    <!-- Set up root directory (win) -->
    <copy todir="${win.build.scala.dir}">
      <fileset
        dir="${build.install.dir}/sbaz"
        excludes="lib/fjbg.jar,man/**,**/gedit/**,**/kate/**,**/latex/**,**/xcode/**"
      />
    </copy>
    <fixcrlf
      srcdir="${win.build.scala.dir}" eol="dos"
      includes="**/*.bat,**/*.css,**/*.html,**/*.scala,**/LICENSE,**/README"
    />
    <!-- Set up 'src.zip' (win) -->
    <copy todir="${win.build.scala.dir}/src">
      <fileset
        dir="${core.src.dir}/library"
        includes="scala/**/*.scala"
      />
    </copy>
    <fixcrlf srcdir="${win.build.scala.dir}/src" eol="dos"/>
    <zip
      destfile="${win.build.scala.dir}/src.zip"
      basedir="${win.build.scala.dir}"
      includes="src/**"
    />
    <delete dir="${win.build.scala.dir}/src"/>
    <!-- Create zip archive -->
    <zip
      destfile="${build.win.dir}/${dist.archive}.zip"
      basedir="${build.win.dir}"
      includes="${dist.archive}/**"
    />
    <checksum
      file="${build.win.dir}/${dist.archive}.zip"
      forceOverwrite="yes"
      fileext=".md5"
    />
    <!-- Set up 'latest' directory (win) -->
    <if><isset property="os.win"/>
      <then>
        <copy todir="${win.build.latest.dir}">
          <fileset dir="${win.build.cur.dir}"/>
        </copy>
      </then>
      <else>
        <symlink link="${win.build.latest.dir}"
                 resource="${win.build.cur.dir}"
                 overwrite="yes"
                 failonerror="no"/>
      </else>
    </if>
  </target>

<!-- ===========================================================================
IZPACK INSTALLER
============================================================================ -->

  <target name="build.izpack" depends="build.init,build.unix,build.win"
          description="Creates a Java installer using IzPack">
    <!-- A path containing the IzPack library -->
    <path id="izpack.classpath">
      <pathelement location="${izpack.jar}"/>
    </path>
    <fail message="IzPack compiler in 'lib/' is not available">
      <condition><not>
        <available classname="com.izforge.izpack.ant.IzPackTask"
                   classpathref="izpack.classpath"/>
      </not></condition>
    </fail>
    <taskdef name="izpack"
             classname="com.izforge.izpack.ant.IzPackTask"
             classpathref="izpack.classpath"/>
    <!-- Copy binary files without using filter -->
    <copy todir="${build.izpack.dir}" overwrite="true">
      <fileset
        dir="${src.dir}"
        excludes="**/*.html, **/*.xml"
      />
    </copy>
    <copy todir="${build.izpack.dir}" overwrite="true">
      <!-- CAUTION! Copy operations using filters will -->
      <!-- corrupt binary files (see "Core Types").    -->
      <fileset
        dir="${src.dir}"
        includes="**/*.html, **/*.xml"
      />
      <filterset>
        <filter token="UNIXDIR"     value="${unix.build.latest.dir}"/>
        <filter token="WINDIR"      value="${win.build.latest.dir}"/>
        <filter token="RESOURCEDIR" value="${build.izpack.dir}"/>
        <filter token="PREFIX"      value="${dist.name}"/>
        <filter token="VERSION"     value="${version.number}"/>
        <filter token="URL"         value="http://scala.epfl.ch/"/>
      </filterset>
    </copy>
    <property name="dist.installer" value="${dist.archive}-installer"/>
    <izpack
      input="${build.izpack.dir}/install-nsc.xml"
      output="${build.dir}/${dist.installer}.jar"
      installerType="standard" basedir="${basedir}"
      izPackDir="${build.izpack.dir}"
    />
  </target>

<!-- ===========================================================================
DISTRIBUTION
============================================================================ -->

  <target name="dist.devel" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}.${svn.revision}"
    />
    <property name="dist.version" value="dist.devel"/>
    <runtarget target="dist"/>
  </target>

  <target name="dist.minor" depends="init">
    <property file="${number.file}"/>
    <property
       name="version.number"
       value="${version.major}.${version.minor}.${version.patch}"
    />
    <property name="dist.version" value="dist.minor"/>
    <runtarget target="dist"/>
  </target>

  <target name="dist.patch" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}"
    />
    <property name="dist.version" value="dist.patch"/>
    <runtarget target="dist"/>
  </target>

  <target name="dist.dependencies" depends="init">
    <property name="dist.version" value="dist"/>
    <!-- public version number is set by module 'scala' -->
    <ant dir="${dep.dir}/scala"               target="${dist.version}" inheritAll="false"/>
    <ant dir="${dep.dir}/scalap"              target="${dist.version}" inheritAll="false"/>
    <ant dir="${dep.dir}/scala-documentation" target="${dist.version}" inheritAll="false"/>
    <ant dir="${dep.dir}/scala-tool-support"  target="${dist.version}" inheritAll="false"/>
<!--
    <for list="scalap,scala-tool-support,scala-documentation" param="project.name">
      <sequential>
        <ant dir="${dep.dir}/@{project.name}" target="${dist.version}" inheritAll="false">
          <property name="version.number" value="${version.number}"/>
        </ant>
      </sequential>
    </for>
-->
  </target>

  <target name="dist" depends="clean.all,dist.dependencies,build">
    <property name="dist.current.dir"
              value="${dist.dir}/${dist.archive}"/>
    <copy todir="${dist.current.dir}" overwrite="true">
      <fileset dir="${build.unix.dir}" includes="*.jar,*.md5,*.tar.bz2,*.tar.gz"/>
      <fileset dir="${build.win.dir}"  includes="*.zip,*.md5"/>
    </copy>
    <if><isset property="os.win"/>
      <then>
        <copy todir="${dist.latest.dir}">
          <fileset dir="${dist.current.dir}"/>
        </copy>
      </then>
      <else>
        <symlink
          link="${dist.latest.dir}"
          resource="${dist.current.dir}"
          overwrite="yes"
          failonerror="no"
        />
      </else>
    </if>
    <!-- SBaz packages -->
    <copy todir="${dist.sbaz.dir}" overwrite="true">
      <fileset dir="${build.sbaz.dir}" includes="*.sbp,*.advert"/>
    </copy>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}"
              includeemptydirs="yes"
              quiet="yes"
              failonerror="no"/>
    </sequential>
  </macrodef>

  <target name="clean"
          depends="clean.build"
          description="Deletes all generated build files."/>

  <target name="clean.build" description="Removes all build products">
    <ant dir="dependencies/scala" target="clean.build" inheritAll="false"/>
    <ant dir="dependencies/scalap" target="clean.build" inheritAll="false"/>
    <ant dir="dependencies/scala-documentation" target="clean.build" inheritAll="false"/>
    <ant dir="dependencies/scala-tool-support" target="clean.build" inheritAll="false"/>
    <remove dir="${build.dir}"/>
  </target>

  <target name="clean.all"
          description="Removes all build products and distributions">
    <ant dir="dependencies/scala" target="clean.all" inheritAll="false"/>
    <ant dir="dependencies/scalap" target="clean.all" inheritAll="false"/>
    <ant dir="dependencies/scala-documentation" target="clean.all" inheritAll="false"/>
    <ant dir="dependencies/scala-tool-support" target="clean.all" inheritAll="false"/>
    <remove dir="${build.dir}"/>
    <remove dir="${dist.dir}"/>
  </target>

<!-- ===========================================================================
HELP
============================================================================ -->

  <target name="help" depends="usage"/>

  <target name="usage" description="Display usage information.">
    <echo>Execute 'ant -projecthelp' for build file help.</echo>
    <echo>Execute 'ant -help' for Ant help.</echo>
  </target>

<!-- ===========================================================================
MACROS
============================================================================ -->

  <!-- create symbolic links *relative* to their target -->
  <!-- Ant task 'symlink' only support canonical paths  -->
  <macrodef name="symlink.bin">
    <attribute name="file"/>
    <attribute name="tofile"/>
    <sequential>
      <copy file="@{file}" tofile="@{tofile}"/>
      <chmod file="@{tofile}" perm="755"/>
      <for list="sbaz,scala,scalac,scaladoc,scalaint,scalap" param="script">
        <sequential>
          <exec executable="sh">
            <arg line="@{tofile} ../share/${dist.name}/bin/@{script}"/>
          </exec>
        </sequential>
      </for>
      <delete file="@{tofile}"/>
    </sequential>
  </macrodef>

  <macrodef name="symlink.doc">
    <attribute name="file"/>
    <attribute name="tofile"/>
    <sequential>
      <copy file="@{file}" tofile="@{tofile}"/>
      <chmod file="@{tofile}" perm="755"/>
      <for list="ScalaByExample,ScalaRationale,ScalaReference,ScalaTutorial" param="file.name">
        <sequential>
          <exec executable="sh">
            <arg line="@{tofile} ../../${dist.name}/doc/scala-documentation/@{file.name}.pdf"/>
          </exec>
        </sequential>
      </for>
      <exec executable="sh">
        <arg line="@{tofile} ../../${dist.name}/doc/scala-devel/${dist.name}/api"/>
      </exec>
      <exec executable="sh">
        <arg line="@{tofile} ../../${dist.name}/doc/scala-devel/${dist.name}/examples"/>
      </exec>
      <delete file="@{tofile}"/>
    </sequential>
  </macrodef>

  <macrodef name="symlink.man">
    <attribute name="file"/>
    <attribute name="tofile"/>
    <sequential>
      <copy file="@{file}" tofile="@{tofile}"/>
      <chmod file="@{tofile}" perm="755"/>
      <for list="scala.1,scalac.1,scaladoc.1,scalaint.1" param="manpage">
        <sequential>
          <exec executable="sh">
            <arg line="@{tofile} ../../${dist.name}/man/man1/@{manpage}"/>
          </exec>
        </sequential>
      </for>
      <delete file="@{tofile}"/>
    </sequential>
  </macrodef>

  <!-- create Unix tarballs while preserving permissions and symlinks -->
  <!-- Ant task 'tar' can't do that.. -->
  <macrodef name="mytar">
    <attribute name="dir"/>
    <attribute name="archive"/>
    <attribute name="compression"/>
    <sequential>
      <exec dir="@{dir}" executable="tar">
        <arg line="cf @{archive}.tar -C @{archive} ."/>
      </exec>
      <exec dir="@{dir}" executable="@{compression}">
        <arg line="-9 @{archive}.tar"/>
      </exec>
    </sequential>
  </macrodef>

</project>
