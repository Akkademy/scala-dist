<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->

<project name="scala-installer" default="build">

  <description>
    I am SABBUS for ${ant.project.name}, the build system for the Scala installer.
    Please check the 'docs/README' file for more information about me.
  </description>

  <echo>Running SABBUS for ${ant.project.name}...</echo>

<!-- ===========================================================================
PROPERTIES
============================================================================ -->

  <property environment="env"/>

  <!-- Base properties -->
  <property name="bin.dir"           value="${basedir}/bin"/>
  <property name="dep.dir"           value="${basedir}/dependencies"/>
  <property name="lib.dir"           value="${basedir}/lib"/>
  <property name="src.dir"           value="${basedir}/src"/>
  <!-- User properties -->
  <property file="${basedir}/build.properties"/>
  <!-- Sets location of build folders -->
  <property name="build.dir"         value="${basedir}/build"/>
  <property name="build.install.dir" value="${build.dir}/install"/>
  <property name="build.izpack.dir"  value="${build.dir}/izpack"/>
  <property name="build.sbaz.dir"    value="${build.dir}/sbaz"/>
  <property name="build.unix.dir"    value="${build.dir}/unix"/>
  <property name="build.win.dir"     value="${build.dir}/windows"/>
  <property name="dist.dir"          value="${basedir}/dists"/>
  <!-- SVN configuration properties -->
  <property name="svn.entries"       value="${basedir}/.svn/entries"/>
  <!-- Location of pre-compiled libraries properties -->
  <property name="izpack.jar"        value="${lib.dir}/standalone-compiler.jar"/>
  <!-- Dependencies to module 'scala' -->
  <property name="core.dir"          value="${dep.dir}/scala"/>
  <property name="core.dist.dir"     value="${core.dir}/dists"/>
  <property name="core.doc.dir"      value="${core.dir}/docs"/>
  <property name="core.lib.dir"      value="${core.dir}/lib"/>
  <property name="core.src.dir"      value="${core.dir}/src"/>
  <property name="core.latest.dir"   value="${core.dist.dir}/latest"/>
  <property name="ant-contrib.jar"   value="${core.lib.dir}/ant-contrib.jar"/>
  <property name="number.file"       value="${core.dir}/build.number"/>
  <!-- Dependencies to module 'scala-documentation' -->
  <property name="docu.dir"          value="${dep.dir}/scala-documentation"/>
  <property name="docu.dist.dir"     value="${docu.dir}/dists"/>
  <property name="docu.latest.dir"   value="${docu.dist.dir}/latest"/>
  <property name="docu.sbaz.dir"     value="${docu.dist.dir}/sbaz"/>
  <!-- Dependencies to module 'sbaz' -->
  <property name="sbaz.dir"          value="${dep.dir}/sbaz"/>
  <!-- Dependencies to module 'scalap' -->
  <property name="scalap.dir"        value="${dep.dir}/scalap"/>
  <property name="scalap.jar.name"   value="scala-decoder.jar"/>
  <property name="scalap.dist.dir"   value="${scalap.dir}/dists"/>
  <property name="scalap.latest.dir" value="${scalap.dist.dir}/latest"/>
  <property name="scalap.sbaz.dir"   value="${scalap.dist.dir}/sbaz"/>
  <!-- Dependencies to module 'scala-tool-support' -->
  <property name="support.dir"        value="${dep.dir}/scala-tool-support"/>
  <property name="support.dist.dir"   value="${support.dir}/dists"/>
  <property name="support.latest.dir" value="${support.dist.dir}/latest"/>
  <property name="support.sbaz.dir"   value="${support.dist.dir}/sbaz"/>
  <!-- Distribution properties -->
  <property name="dist.name"          value="scala"/>
  <property name="dist.latest.dir"    value="${dist.dir}/latest"/>
  <property name="dist.sbaz.dir"      value="${dist.dir}/sbaz"/>
  <property name="version.separator"  value="."/>

<!-- ===========================================================================
INITIALISATION
============================================================================ -->

  <target name="init" unless="init.avail">
    <tstamp prefix="time">
      <format
        property="human"
        pattern="EEEE, d MMMM yyyy, HH:mm:ss (zz)"
      />
      <format
        property="short"
        pattern="yyyyMMdd-HHmmss"
      />
    </tstamp>
    <echo level="verbose" message="ant-contrib.jar=${ant-contrib.jar}"/>
    <fail message="Additional Ant tasks in '${core.lib.dir}/' is not available">
      <condition><not>
        <available
          classname="net.sf.antcontrib.AntContribVersion"
          classpath="${ant-contrib.jar}"
        />
      </not></condition>
    </fail>
    <fail message="External library ${ant-contrib.jar} requires the optional Ant tasks to be installed">
      <condition><not><and>
        <available file="${ant.home}/lib/ant-nodeps.jar"/>
      </and></not></condition>
    </fail>
    <!-- Creating boot-level tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${ant-contrib.jar}"/>
      </classpath>
    </taskdef>
    <!-- Finding out SVN revision -->
    <exec
      executable="svn" vmlauncher="no"
      errorproperty="svn.err" outputproperty="svn.out">
      <arg line=" info ${basedir}"/>
    </exec>
    <propertyregex
      property="svn.number" input="${svn.out}" select="\1"
      regexp="Revision: ([0-9]+)"
      defaultValue="x"/>
    <property name="init.avail" value="true"/>
  </target>

  <target name="build.init" depends="init" unless="build.init.avail">
    <!-- Testing if everything is in place -->
    <echo level="verbose">core.dir=${core.dir}</echo>
    <fail message="Required Scala core is missing; check the 'core.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${core.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala distribution is missing; run command 'ant dist' in the directory specified by the 'core.dir' property.">
      <condition><not><and>
        <available file="${core.dist.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose">docu.dir=${docu.dir}</echo>
    <fail message="Required Scala documentation is missing; check the 'docu.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${docu.dir}"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala documents are missing; run command 'ant dist' in the directory specified by the 'docu.dir' property.">
      <condition><not><and>
        <available file="${docu.latest.dir}/Changes.pdf"/>
        <available file="${docu.latest.dir}/ScalaByExample.pdf"/>
        <available file="${docu.latest.dir}/ScalaReference.pdf"/>
        <available file="${docu.latest.dir}/ScalaTutorial.pdf"/>
      </and></not></condition>
    </fail>
    <fail message="Required Scala tool 'scalap' is missing; run command 'ant dist' in the directory specified by the 'scalap.dir' property.">
      <condition><not><and>
        <available file="${scalap.dist.dir}"/>
      </and></not></condition>
    </fail>
    <echo level="verbose">support.dir=${support.dir}</echo>
    <fail message="Required Scala support is missing; check the 'support.dir' property in 'build.properties'.">
      <condition><not><and>
        <available file="${support.dir}"/>
      </and></not></condition>
    </fail>
    <!-- Finding out what system architecture is being used -->
    <condition property="os.win">
      <os family="windows"/>
    </condition>
    <if><isset property="os.win"/>
      <then>
        <exec executable="cygpath"
              vmlauncher="no"
              errorproperty="cygpath.err"
              outputproperty="cygpath.out">
          <arg value="--windir"/>
        </exec>
        <condition property="os.cygwin">
          <equals arg1="${cygpath.err}" arg2=""/>
        </condition>
      </then>
    </if>
    <condition property="os.unix">
      <or>
        <os family="unix"/>
        <os family="mac"/>
        <isset property="os.cygwin"/>
      </or>
    </condition>
    <!-- Generating version number -->
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}.${time.short}"
    />
    <echo level="verbose" message="version.number=${version.number}"/>
    <property name="dist.archive"           value="${dist.name}-${version.number}"/>
    <property name="dist.archive.sbaz"      value="${dist.name}-${version.number}-sbaz"/>
    <!-- Structure of the sbaz build-->
    <property name="sbaz.build.cur.dir"     value="${build.sbaz.dir}/${dist.archive.sbaz}"/>
    <!-- Structure of the Unix build-->
    <property name="unix.build.cur.dir"     value="${build.unix.dir}/${dist.archive}"/>
    <property name="unix.build.bin.dir"     value="${unix.build.cur.dir}/bin"/>
    <property name="unix.build.doc.dir"     value="${unix.build.cur.dir}/doc"/>
    <property name="unix.build.latest.dir"  value="${build.unix.dir}/latest"/>
    <property name="unix.build.man.dir"     value="${unix.build.cur.dir}/man"/>
    <property name="unix.build.scala.dir"   value="${unix.build.cur.dir}"/>
    <property name="unix.build.lib.dir"     value="${unix.build.scala.dir}/lib"/>
    <property name="unix.build.support.dir" value="${unix.build.scala.dir}/support"/>
    <property name="unix.build.test.dir"    value="${unix.build.scala.dir}/test"/>
    <!-- Structure of the Windows build -->
    <property name="win.build.cur.dir"      value="${build.win.dir}/${dist.archive}"/>
    <property name="win.build.bin.dir"      value="${win.build.cur.dir}/bin"/>
    <property name="win.build.doc.dir"      value="${win.build.cur.dir}/doc"/>
    <property name="win.build.latest.dir"   value="${build.win.dir}/latest"/>
    <property name="win.build.examples.dir" value="${win.build.cur.dir}/examples"/>
    <property name="win.build.scala.dir"    value="${win.build.cur.dir}"/>
    <property name="win.build.lib.dir"      value="${win.build.scala.dir}/lib"/>
    <property name="win.build.support.dir"  value="${win.build.scala.dir}/support"/>
    <property name="build.init.avail" value="true"/>
  </target>

<!-- ===========================================================================
FULL BUILD
============================================================================ -->
<!--
  <target name="build.devel" depends="init">
    <property file="${number.file}"/>
    <property
      name="version.number"
      value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}"
    />
    <runtarget target="build"/>
  </target>
-->
  <target
    name="build"
    depends="init,build.sbaz,build.unix,build.win,build.izpack"
    description="Creates a full Scala build."
  />

  <target name="dep.sbaz.init" depends="init" unless="dep.sbaz.avail">
    <remove dir="${build.install.dir}"/>
    <mkdir dir="${build.install.dir}/sbaz"/>
    <!-- Install package 'sbaz' -->
    <fileset
	id="sbaz.sbp.id"
	dir="${dep.dir}/sbaz/dists"
	includes="sbaz-*.sbp"/>
    <property name="sbaz.sbp" refid="sbaz.sbp.id"/>
    <unzip src="${dep.dir}/sbaz/dists/${sbaz.sbp}" dest="${build.install.dir}/sbaz"/>
    <chmod dir="${build.install.dir}/sbaz/bin" perm="ugo+rx" excludes="*.bat"/>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${dep.dir}/sbaz/dists/${sbaz.sbp}"/>
    </exec>
    <!-- Install package 'sbaz-setup' -->
    <fileset
      id="sbaz.setup.sbp.id"
      dir="${dep.dir}/sbaz-setup/dists"
      includes="sbaz-setup-*.sbp"/>
    <property name="sbaz.setup.sbp" refid="sbaz.setup.sbp.id"/>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${dep.dir}/sbaz-setup/dists/${sbaz.setup.sbp}"/>
    </exec>
    <!-- Setup sbaz universe -->
    <echo
      level="info"
      message="Setting up sbaz universe..."
    />
    <if><equals arg1="final" arg2="${version.suffix}"/>
      <then>
        <exec executable="${build.install.dir}/sbaz/bin/sbaz">
          <arg line="setuniverse ${src.dir}/meta/universe"/>
        </exec>
      </then>
      <else>
        <exec executable="${build.install.dir}/sbaz/bin/sbaz">
          <arg line="setuniverse ${src.dir}/meta/lamp-rc"/>
        </exec>
      </else>
    </if>
    <property name="dep.sbaz.avail" value="true"/>
  </target>

  <target name="build.sbaz" depends="build.init,dep.sbaz.init" unless="build.sbaz.avail"
          description="">
    <copy todir="${sbaz.build.cur.dir}" overwrite="true">
      <fileset dir="${core.dist.dir}/sbaz"    includes="*.sbp,*.advert"/>
      <fileset dir="${scalap.sbaz.dir}"  includes="*.sbp,*.advert"/>
      <fileset dir="${docu.sbaz.dir}"    includes="*.sbp,*.advert"/>
      <fileset dir="${support.sbaz.dir}" includes="*.sbp,*.advert"/>
    </copy>
    <property
      name="version.notime"
      value="${version.major}.${version.minor}.${version.patch}"
    />
    <!-- Install package 'scala-library' -->
    <fileset
      id="scala.lib.id"
      dir="${sbaz.build.cur.dir}"
      includes="scala-library-${version.notime}*.sbp"
    />
    <property name="scala.lib.sbp" refid="scala.lib.id"/>
    <echo level="verbose" message="scala-library-${version.notime}*.sbp"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scala.lib.sbp}' is missing.">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scala.lib.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scala.lib.sbp}"/>
    </exec>
    <!-- Install package 'scala-devel' -->
    <fileset id="scala.devel.id"
      dir="${sbaz.build.cur.dir}"
      includes="scala-devel-${version.notime}*.sbp"
    />
    <property name="scala.devel.sbp" refid="scala.devel.id"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scala.devel.sbp}' is missing.">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scala.devel.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scala.devel.sbp}"/>
    </exec>
    <!-- Install package 'scalap' (depends on 'scala-devel') -->
    <fileset
      id="scalap.id"
      dir="${sbaz.build.cur.dir}"
      includes="scalap-${version.number}*.sbp"
    />
    <property name="scalap.sbp" refid="scalap.id"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scalap.sbp}' is missing (scalap-${version.number}*.sbp).">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scalap.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scalap.sbp}"/>
    </exec>
    <!-- Install package 'scala' after 'scala-library/-devel' -->
    <fileset
      id="scala.id"
      dir="${sbaz.build.cur.dir}"
      includes="scala-${version.number}*.sbp"
    />
    <property name="scala.sbp" refid="scala.id"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scala.sbp}' is missing.">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scala.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scala.sbp}"/>
    </exec>
    <!-- Install package 'base' after 'scala-library' -->
    <fileset
      id="base.sbp.id"
      dir="${dep.dir}/sbaz/dists"
      includes="base-*.sbp"
    />
    <property name="base.sbp" refid="base.sbp.id"/>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${dep.dir}/sbaz/dists/${base.sbp}"/>
    </exec>
    <!-- Install package 'scala-tool-support' -->
    <fileset
      id="scala.support.id"
      dir="${sbaz.build.cur.dir}"
      includes="scala-tool-support-${version.number}*.sbp"
    />
    <property name="scala.support.sbp" refid="scala.support.id"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scala.support.sbp}' is missing.">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scala.support.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scala.support.sbp}"/>
    </exec>
    <!-- Clean up sbaz cache -->
    <echo
      level="info"
      message="Compacting sbaz-managed directory '${build.install.dir}/sbaz"
    />
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="compact"/>
    </exec>
    <!-- Create gzip compressed tarball -->
    <mytar
      dir="${build.sbaz.dir}"
      archive="${dist.archive.sbaz}"
      compression="gzip"
    />
    <!-- Create md5 checksums -->
    <checksum
      file="${build.sbaz.dir}/${dist.archive.sbaz}.tar.gz"
      forceOverwrite="yes"
      fileext=".md5"
    />
    <property name="build.sbaz.avail" value="true"/>
  </target>

  <target name="build.sbaz.addons" depends="build.sbaz" unless="build.sbaz.addons.avail"
          description="">
    <!-- Install package 'scala-devel' (docs) -->
    <fileset id="scala.devel.docs.id"
      dir="${sbaz.build.cur.dir}"
      includes="scala-devel-docs-${version.notime}*.sbp"
    />
    <property name="scala.devel.docs.sbp" refid="scala.devel.docs.id"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scala.devel.docs.sbp}' is missing.">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scala.devel.docs.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scala.devel.docs.sbp}"/>
    </exec>
    <!-- Install package 'scala-documentation' -->
    <fileset
      id="scala.docu.id"
      dir="${sbaz.build.cur.dir}"
      includes="scala-documentation-${version.number}*.sbp"
    />
    <property name="scala.docu.sbp" refid="scala.docu.id"/>
    <fail message="Required package '${sbaz.build.cur.dir}/${scala.docu.sbp}' is missing (scala-documentation-${version.number}*.sbp).">
      <condition><not><and>
        <available file="${sbaz.build.cur.dir}/${scala.docu.sbp}" type="file"/>
      </and></not></condition>
    </fail>
    <exec executable="${build.install.dir}/sbaz/bin/sbaz">
      <arg line="install -f ${sbaz.build.cur.dir}/${scala.docu.sbp}"/>
    </exec>
    <property name="build.sbaz.addons.avail" value="true"/>
  </target>

<!-- ===========================================================================
UNIX BUILD
============================================================================ -->

  <target name="build.unix" depends="build.sbaz"
          description="Creates a full Scala distribution for Unix.">
    <!-- Set up root directory (unix) -->
    <!-- Note: We do not exclude bin/*.bat for Cygwin users -->
    <copy todir="${unix.build.scala.dir}">
      <fileset
        dir="${build.install.dir}/sbaz"
        excludes="**/context/**,**/latex/**,**/textpad/**,**/ultraedit/**"
      />
    </copy>
    <fixcrlf srcdir="${unix.build.bin.dir}" eol="unix"/>
    <chmod dir="${unix.build.bin.dir}" perm="a+x" includes="**/*"/>
    <!--
    <tar
      destfile="${unix.build.scala.dir}/src.tar.gz"
      basedir="${core.src.dir}/library"
      includes="scala/**/*.scala"
      compression="gzip"
    />
    -->
    <!-- Create gzip and bz2 compressed tarballs -->
    <mytar
      dir="${build.unix.dir}"
      archive="${dist.archive}"
      compression="gzip"
    />
<!--    <mytar
      dir="${build.unix.dir}"
      archive="${dist.archive}"
      compression="bzip2"
    /> -->
    <!-- Create md5 checksums -->
    <checksum
      file="${build.unix.dir}/${dist.archive}.tar.gz"
      forceOverwrite="yes"
      fileext=".md5"
    />
<!--    <checksum
      file="${build.unix.dir}/${dist.archive}.tar.bz2"
      forceOverwrite="yes"
      fileext=".md5"
    /> -->
    <!-- Set up 'latest' directory (unix) -->
    <if><isset property="os.win"/>
      <then>
        <copy todir="${unix.build.latest.dir}">
          <fileset dir="${unix.build.cur.dir}"/>
        </copy>
      </then>
      <else>
        <symlink
          link="${unix.build.latest.dir}"
          resource="${unix.build.cur.dir}"
          overwrite="yes"
          failonerror="no"
        />
      </else>
    </if>
  </target>

  <target name="build.mac" depends="build.unix"/>

<!-- ===========================================================================
WINDOWS BUILD
============================================================================ -->

  <target name="build.win" depends="build.sbaz"
          description="Creates a full Scala distribution for Windows.">
    <!-- Set up root directory (win) -->
    <copy todir="${win.build.scala.dir}">
      <fileset
        dir="${build.install.dir}/sbaz"
        excludes="lib/fjbg.jar,man/**,**/gedit/**,**/kate/**,**/latex/**,**/xcode/**"
      />
    </copy>
    <fixcrlf
      srcdir="${win.build.scala.dir}" eol="dos"
      includes="**/*.bat,**/*.css,**/*.html,**/*.scala,**/LICENSE,**/README"
    />
    <!-- Set up 'src.zip' (win) -->
    <!--
    <copy todir="${win.build.scala.dir}/src">
      <fileset
        dir="${core.src.dir}/library"
        includes="scala/**/*.scala"
      />
    </copy>
    <fixcrlf srcdir="${win.build.scala.dir}/src" eol="dos"/>
    <zip
      destfile="${win.build.scala.dir}/src.zip"
      basedir="${win.build.scala.dir}"
      includes="src/**"
    />
    <delete dir="${win.build.scala.dir}/src"/>
    -->
    <!-- Create zip archive -->
    <zip
      destfile="${build.win.dir}/${dist.archive}.zip"
      basedir="${build.win.dir}"
      includes="${dist.archive}/**"
    />
    <checksum
      file="${build.win.dir}/${dist.archive}.zip"
      forceOverwrite="yes"
      fileext=".md5"
    />
    <!-- Set up 'latest' directory (win) -->
    <if><isset property="os.win"/>
      <then>
        <copy todir="${win.build.latest.dir}">
          <fileset dir="${win.build.cur.dir}"/>
        </copy>
      </then>
      <else>
        <symlink
          link="${win.build.latest.dir}"
          resource="${win.build.cur.dir}"
          overwrite="yes"
          failonerror="no"
        />
      </else>
    </if>
  </target>

<!-- ===========================================================================
IZPACK INSTALLER
============================================================================ -->

  <target name="build.izpack" depends="build.unix,build.win,build.sbaz.addons"
          description="Creates a Java installer using IzPack">
    <!-- A path containing the IzPack library -->
    <path id="izpack.classpath">
      <pathelement location="${izpack.jar}"/>
    </path>
    <fail message="IzPack compiler in 'lib/' is not available">
      <condition><not>
        <available
          classname="com.izforge.izpack.ant.IzPackTask"
          classpathref="izpack.classpath"
        />
      </not></condition>
    </fail>
    <taskdef
      name="izpack"
      classname="com.izforge.izpack.ant.IzPackTask"
      classpathref="izpack.classpath"
    />
    <!-- Copy binary files without using filter -->
    <copy todir="${build.izpack.dir}" overwrite="true">
      <fileset
        dir="${src.dir}"
        excludes="**/*.html, **/*.xml"
      />
    </copy>
    <copy todir="${build.izpack.dir}" overwrite="true">
      <!-- CAUTION! Copy operations using filters will -->
      <!-- corrupt binary files (see "Core Types").    -->
      <fileset
        dir="${src.dir}"
        includes="**/*.html, **/*.xml"
      />
      <filterset>
        <filter token="UNIXDIR"     value="${unix.build.latest.dir}"/>
        <filter token="WINDIR"      value="${win.build.latest.dir}"/>
        <filter token="SBAZDIR"     value="${build.install.dir}/sbaz"/>
        <filter token="RESOURCEDIR" value="${build.izpack.dir}"/>
        <filter token="PREFIX"      value="${dist.archive}"/>
        <filter token="VERSION"     value="${version.number}"/>
        <filter token="URL"         value="http://scala-lang.org/"/>
      </filterset>
    </copy>
    <property name="dist.installer" value="${dist.archive}-installer"/>
    <izpack
      input="${build.izpack.dir}/install-nsc.xml"
      output="${build.dir}/${dist.installer}.jar"
      installerType="standard" basedir="${basedir}"
      izPackDir="${build.izpack.dir}"
    />
  </target>

<!-- ===========================================================================
DISTRIBUTION
============================================================================ -->

  <target name="dist.devel">
    <property name="dist.version" value="dist.devel"/>
    <antcall target="dist"/>
  </target>

  <target name="dist.minor">
    <property name="dist.version" value="dist.minor"/>
    <antcall target="dist"/>
  </target>

  <target name="dist.patch">
    <property name="dist.version" value="dist.patch"/>
    <antcall target="dist"/>
  </target>

  <target name="dist.dependencies" depends="init"
          description="Creates a full Scala distribution.">
    <property name="dist.version" value="dist"/>
    <!-- public version number is set by module 'scala' -->
    <ant dir="${dep.dir}/sbaz"                target="dist"            inheritAll="false"/>
    <ant dir="${dep.dir}/sbaz-setup"          target="dist"            inheritAll="false"/>
<!--    <ant dir="${dep.dir}/scala"               target="${dist.version}" inheritAll="false"/> -->
    <ant antfile="${dep.dir}/scala/sabbus.xml" target="distpack" inheritAll="false">
      <property name="version.number" value="${version.number}"/>
    </ant>
    <ant dir="${dep.dir}/scalap"              target="${dist.version}" inheritAll="false"/>
    <ant dir="${dep.dir}/scala-documentation" target="${dist.version}" inheritAll="false"/>
    <ant dir="${dep.dir}/scala-tool-support"  target="${dist.version}" inheritAll="false"/>
  </target>

  <target name="dist.init" depends="init">
    <property name="dist.version" value="dist.devel"/>
    <!-- Use version number corresponding to specified 'dist.version' -->
    <property file="${number.file}"/>
    <switch value="${dist.version}">
      <case value="dist.devel">
        <property
          name="version.number"
          value="${version.major}.${version.minor}.${version.patch}${version.separator}${svn.number}"
        />
      </case>
      <case value="dist.minor">
        <property
          name="version.number"
          value="${version.major}.${version.minor}.${version.patch}.${version.suffix}"
        />
      </case>
      <case value="dist.patch">
        <property
          name="version.number"
          value="${version.major}.${version.minor}.${version.patch}.${version.suffix}"
        />
      </case>
    </switch>
  </target>

  <target name="dist" depends="clean.all,dist.init,dist.dependencies,dist.all"/>

  <target name="dist.quick" depends="dist.init,dist.all"/>

  <target name="dist.all" depends="build">
    <property
      name="dist.current.dir"
      value="${dist.dir}/${dist.archive}"
    />
    <copy todir="${dist.current.dir}" overwrite="true">
      <fileset dir="${build.dir}"      includes="*.jar"/>
      <fileset dir="${build.sbaz.dir}" includes="*.tar.gz,*.md5"/>
<!--      <fileset dir="${build.unix.dir}" includes="*.tar.bz2,*.tar.gz,*.md5"/> -->
      <fileset dir="${build.unix.dir}" includes="*.tar.gz,*.md5"/>
      <fileset dir="${build.win.dir}"  includes="*.zip,*.md5"/>
      <fileset dir="${core.dist.dir}/archives" includes="*-sources.tgz"/>
      <fileset dir="${core.dist.dir}/archives" includes="*-api.tgz"/>
    </copy>
    <if><isset property="os.win"/>
      <then>
        <copy todir="${dist.latest.dir}">
          <fileset dir="${dist.current.dir}"/>
        </copy>
      </then>
      <else>
        <symlink
          link="${dist.latest.dir}"
          resource="${dist.current.dir}"
          overwrite="yes"
          failonerror="no"
        />
      </else>
    </if>
  </target>

<!-- ===========================================================================
CLEAN
============================================================================ -->

  <macrodef name="remove">
    <attribute name="dir"/>
    <sequential>
      <delete dir="@{dir}"
              includeemptydirs="yes"
              quiet="yes"
              failonerror="no"/>
    </sequential>
  </macrodef>

  <target
    name="clean"
    depends="clean.build"
    description="Deletes all generated build files."
  />

  <target name="clean.build" description="Removes all build products">
    <ant antfile="dependencies/scala/sabbus.xml" target="dist.clean" inheritAll="false"/>
    <ant dir="dependencies/scala-documentation" target="clean.build" inheritAll="false"/>
    <ant dir="dependencies/scalap" target="clean.build" inheritAll="false"/>
    <ant dir="dependencies/scala-tool-support" target="clean.build" inheritAll="false"/>
    <remove dir="${build.dir}"/>
  </target>

  <target name="clean.all" description="Removes all build products and distributions">
    <ant dir="dependencies/sbaz" target="clean.all" inheritAll="false"/>
    <ant dir="dependencies/sbaz-setup" target="clean.all" inheritAll="false"/>
    <ant antfile="dependencies/scala/sabbus.xml" target="all.clean" inheritAll="false"/>
    <ant dir="dependencies/scala-documentation" target="clean.all" inheritAll="false"/>
    <ant dir="dependencies/scalap" target="clean.all" inheritAll="false"/>
    <ant dir="dependencies/scala-tool-support" target="clean.all" inheritAll="false"/>
    <remove dir="${build.dir}"/>
    <remove dir="${dist.dir}"/>
  </target>

<!-- ===========================================================================
HELP
============================================================================ -->

  <target name="help" depends="usage"/>

  <target name="usage" description="Display usage information.">
    <echo>Execute 'ant -projecthelp' for build file help.</echo>
    <echo>Execute 'ant -help' for Ant help.</echo>
  </target>

<!-- ===========================================================================
MACROS
============================================================================ -->

  <!-- create Unix tarballs while preserving permissions and symlinks -->
  <!-- Ant task 'tar' can't do that.. -->
  <macrodef name="mytar">
    <attribute name="dir"/>
    <attribute name="archive"/>
    <attribute name="compression"/>
    <sequential>
      <exec dir="@{dir}" executable="tar">
        <arg line="cf @{archive}.tar --exclude='**/scala/api' --exclude='**/scala/tools' @{archive}"/>
      </exec>
      <exec dir="@{dir}" executable="@{compression}">
        <arg line="-f9 @{archive}.tar"/>
      </exec>
    </sequential>
  </macrodef>

</project>
